#include <em.h>
#include "LLlex.h"
#include "node.h"
#include "scope.h"
#include "desig.h"
#include "def.h"
#include "type.h"
#include "idf.h"
#include "tokenname.h"

/* body.c */
void MarkDef(struct node * nd,unsigned short flags,int on);
void AssertStat(struct node * expp,unsigned short line);
void AssignStat(struct node * left,struct node * right);
void ProcStat(struct node * nd);
void ChkForStat(struct node * nd);
void EndForStat(struct node * nd);
arith CodeInitFor(struct node * nd,int priority);
void CodeFor(struct node * nd,int stepsize,label l1,label l2);
void CodeEndFor(struct node * nd,int stepsize,label l1,label l2,arith tmp2);
void WithStat(struct node * nd);
void EndWith(struct scopelist * saved_scl,struct node * nd);

/* casestat.c */
void CaseExpr(struct node * nd);
void CaseEnd(struct node * nd,label exit_label);

/* chk_expr.c */
void MarkUsed(struct node * nd);
int ChkConstant(struct node * expp);
int ChkVariable(struct node * expp);
int ChkLhs(struct node * expp);
int ChkLinkOrName(struct node * expp);
char * ChkAllowedVar(struct node * nd, int reading);
int ChkCall(struct node * expp);

/* code.c */
void CodeExpr(struct node * nd,struct desig * ds,label true_label);
void CodePExpr(struct node * nd);
void CodeDAddress(struct node * nd);
void routine_label(struct def * df);
void RomString(struct node * nd);
void BssVar(void);
arith CodeBeginBlock(struct def * df);
void CodeEndBlock(struct def * df,arith StackAdjustment);
void Int2Real(arith size);
void RangeCheck(struct type * tpl,struct type * tpr);
void CodeCall(struct node * nd);
void CodeDStore(struct node * nd);

/* cstoper.c */
void cstunary(struct node *expp);
void cstbin(struct node *expp);
void cstset(struct node *expp);
void cstcall(struct node * expp,int req);
void InitCst(void);

/* desig.c */
void CodeDesig(struct node * nd,struct desig * ds);
void CodeAddress(struct desig * ds);
void CodeValue(struct desig * ds,struct type * tp);
void CodeStore(struct desig * ds,struct type * tp);
void CodeMove(struct desig * rhs,struct node * left,struct type * rtp);

/* enter.c */
struct def * Enter(char * name,long kind,struct type * type,int pnam);
void EnterProgList(struct node * Idlist);
void EnterEnumList(struct node * Idlist,struct type * type);
void EnterFieldList(struct node * Idlist,struct type * type,struct scope * scope,arith * addr,unsigned short packed);
void EnterVarList(struct node * Idlist,struct type * type,int local);
arith EnterParamList(struct node * fpl,struct paramlist ** parlist);
arith EnterParTypes(struct node *fpl,struct paramlist ** parlist);

/* error.c */
void error(const char *fmt, ...);
void node_error(struct node *node, const char *fmt, ...);
void warning(const char *fmt, ...);
void node_warning(struct node *node, const char *fmt, ...);
void lexerror(const char *fmt, ...);
void lexwarning(const char *fmt, ...);
void fatal(const char *fmt, ...);
void crash(const char *fmt, ...);

/* label.c */
void DeclLabel(struct node * nd);
void chk_labels(int Slevel);
void TstLabel(struct node * nd,int Slevel);
void DefLabel(struct node * nd,int Slevel);

/* LLlex.c */
void CheckForLineDirective(void);
int LLlex(void);

/* lookup.c */
void remove_def(struct def * df);

/* misc.c */
struct idf * gen_anon_idf(void);
void not_declared(char * what,struct node * id,char * where);
const char * gen_proc_name(struct idf * id,int inp);

/* node.c */
void FreeNode(struct node * nd);
int NodeCrash(struct node * expp);

/* options.c */
void DoOption(char * text);

/* progs.c */
void set_inp(void);
void set_outp(void);
void make_extfl(void);
void call_ini(void);

/* readwrite.c */
void ChkRead(struct node * arg);
void ChkReadln(struct node * arg);
void ChkWrite(struct node * arg);
void ChkWriteln(struct node * arg);

/* scope.c */
void InitScope(void);
void open_scope(void);
void close_scope(int doclean);
void Forward(struct node * nd,struct type * tp);
void chk_prog_params(void);
void chk_directives(void);

/* stab.c */
void stb_addtp(char * s,struct type * tp);
void stb_string(struct def * df,long kind);

/* sym2str.c -- generated by tokcase.awk */
char *symbol2str(int tok);

/* tmpvar.C */
void TmpOpen(struct scope * sc);
arith TmpSpace(arith sz,int al);
arith NewInt(int reg_prior);
arith NewPtr(int reg_prior);
void FreeInt(arith off);
void FreePtr(arith off);
void TmpClose(void);

/* tokenname.c */
void reserve(struct tokenname * resv);

/* type.c */
void InitTypes(void);
void chk_type_id(struct type **ptp,struct node *nd);
void getbounds(struct type * tp,arith * plo,arith * phi);
void ArraySizes(struct type * tp);
void chk_forw_types(void);
int lcm(int m,int n);
void TstCaseConstants(struct node * nd,struct selector * sel,struct selector * sel1);

/* typequiv.c */
int TstTypeEquiv(struct type * tp1,struct type * tp2);
arith IsString(struct type * tp);
int TstCompat(struct type * tp1,struct type * tp2);
int TstAssCompat(struct type * tp1,struct type * tp2);
int TstParCompat(struct type * formaltype,struct type * actualtype,int VARflag,struct node * nd,int new_par_section);

