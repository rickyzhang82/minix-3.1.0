!File: errout.h
#define	ERROUT		stderr	/* file pointer for writing messages	*/
#define ERR_SHADOW      5       /* a syntax error overshadows error messages
                                        until ERR_SHADOW symbols have been
                                        accepted without syntax error */

!File: idfsize.h
#define	IDFSIZE	128	/* maximum significant length of an identifier	*/


!File: numsize.h
#define	NUMSIZE	256	/* maximum length of a numeric constant		*/


!File: strsize.h
#define ISTRSIZE	32	/* minimum number of bytes allocated for
					storing a string		*/
#define RSTRSIZE	8	/* step size in enlarging the memory for
					the storage of a string		*/


!File: target_sizes.h
#define MAXSIZE		8	/* the maximum of the SZ_* constants	*/

/* target machine sizes	*/
#define	SZ_CHAR		((arith)1)
#define	SZ_SHORT	((arith)2)
#define SZ_WORD		((arith)4)
#define	SZ_INT		((arith)4)
#define	SZ_LONG		((arith)4)
#define	SZ_FLOAT	((arith)4)
#define	SZ_DOUBLE	((arith)8)
#define	SZ_POINTER	((arith)4)

/* target machine alignment requirements	*/
#define	AL_CHAR		1
#define	AL_SHORT	((int)SZ_SHORT)
#define AL_WORD		((int)SZ_WORD)
#define	AL_INT		((int)SZ_WORD)
#define	AL_LONG		((int)SZ_WORD)
#define	AL_FLOAT	((int)SZ_WORD)
#define	AL_DOUBLE	((int)SZ_WORD)
#define	AL_POINTER	((int)SZ_WORD)
#define AL_STRUCT	((int)SZ_WORD)


!File: debugcst.h
/*#define DEBUG		1	-- perform various self-tests		*/
#define NDEBUG		1	/* disable assertions			*/

!File: inputtype.h
#define INP_READ_IN_ONE	1	/* read input file in one	*/


!File: density.h
#define DENSITY		3	/* see casestat.C for an explanation */


!File: squeeze.h
/*#define SQUEEZE		1	-- define on "small" machines */


!File: strict3rd.h
/*#define STRICT_3RD_ED	1	-- define on "small" machines, and if you want
				   a compiler that only implements "3rd edition"
				   Modula-2
				*/


!File: nocross.h
/*#define NOCROSS		1	-- define when cross-compiler not needed */


!File: nostrict.h
/*#define NOSTRICT		1	-- define when STRICT warnings disabled
				   (yet another squeezing method)
				*/


!File: bigresult.h
#define BIG_RESULT_ON_STACK 1	/* define when function results must be
				   put on the stack; in this case, caller
				   reserves space for it. When not defined,
				   callee puts result in global data area and
				   returns a pointer to it
				*/


!File: dbsymtab.h
#define DBSYMTAB	1	/* ability to produce symbol table for debugger */


!File: use_insert.h
#define USE_INSERT	1	/* use C_insertpart mechanism */


!File: uns_arith.h
/*#define UNSIGNED_ARITH	unsigned arith	-- when it is supported */


