#!/usr/bin/make
#
# Minix compiler sources makefile
# (C) 2005 Michael Kennett

h = h
m = modules/h
s = modules/src
u = util

# Build directories
l = image
o = obj

# executables used only in the build (e.g. LLgen)
x = $o/bin

default : $l/em_m2

# Many headers are generated - errout.h is representative
$o/m2/errout.h : lang/m2/comp/Parameters
	cd $o/m2 && awk -f../../$u/shf/mk.hfiles.awk ../../lang/m2/comp/Parameters

M2_NEXT_FILES = lang/m2/comp/def.str lang/m2/comp/type.str lang/m2/comp/node.str lang/m2/comp/real.str \
		lang/m2/comp/scope.C lang/m2/comp/tmpvar.C lang/m2/comp/casestat.C

$o/m2/next.c : $(M2_NEXT_FILES)
	awk -flang/m2/comp/next.awk $(M2_NEXT_FILES) > $@

$o/m2/sym2str.c : lang/m2/comp/tokenname.c
	awk -flang/m2/comp/tokcase.awk lang/m2/comp/tokenname.c > $@

$o/m2/def.h : lang/m2/comp/def.str
	sed -f lang/m2/comp/allocd.sed < lang/m2/comp/def.str > $@
$o/m2/type.h : lang/m2/comp/type.str
	sed -f lang/m2/comp/allocd.sed < lang/m2/comp/type.str > $@
$o/m2/real.h : lang/m2/comp/real.str
	sed -f lang/m2/comp/allocd.sed < lang/m2/comp/real.str > $@
$o/m2/node.h : lang/m2/comp/node.str
	sed -f lang/m2/comp/allocd.sed < lang/m2/comp/node.str > $@
$o/m2/scope.c : lang/m2/comp/scope.C
	sed -f lang/m2/comp/allocd.sed < lang/m2/comp/scope.C > $@
$o/m2/tmpvar.c : lang/m2/comp/tmpvar.C
	sed -f lang/m2/comp/allocd.sed < lang/m2/comp/tmpvar.C > $@
$o/m2/casestat.c : lang/m2/comp/casestat.C
	sed -f lang/m2/comp/allocd.sed < lang/m2/comp/casestat.C > $@

$o/m2/declar.g : lang/m2/comp/declar.g
	cp lang/m2/comp/declar.g $@
$o/m2/expression.g : lang/m2/comp/expression.g
	cp lang/m2/comp/expression.g $@
$o/m2/program.g : lang/m2/comp/program.g
	cp lang/m2/comp/program.g $@
$o/m2/statement.g : lang/m2/comp/statement.g
	cp lang/m2/comp/statement.g $@

$o/m2/tokenfile.g : lang/m2/comp/tokenname.c
	sed -f lang/m2/comp/tokenfile.sed < lang/m2/comp/tokenname.c > $@

M2_LLGEN_C = $o/m2/tokenfile.c $o/m2/program.c $o/m2/declar.c \
		$o/m2/expression.c $o/m2/statement.c $o/m2/Lpars.c \
		$o/m2/Lncor.c

M2_LLGEN_G = $o/m2/tokenfile.g $o/m2/program.g $o/m2/declar.g \
		$o/m2/expression.g $o/m2/statement.g

M2_LLGEN_G2 = tokenfile.g program.g declar.g expression.g statement.g

# Several files are generated by LLgen - use Lpars.c as representative
$o/m2/Lpars.c : $(M2_LLGEN_G) $x/LLgen
	cd $o/m2 && ../../$x/LLgen -a -n -P../../$u/LLgen/lib $(M2_LLGEN_G2)

$o/m2/tokenfile.c : $o/m2/Lpars.c
$o/m2/program.c : $o/m2/Lpars.c
$o/m2/declar.c : $o/m2/Lpars.c
$o/m2/expression.c : $o/m2/Lpars.c
$o/m2/statement.c : $o/m2/Lpars.c
$o/m2/Lncor.c : $o/m2/Lpars.c

$o/m2/char.c : lang/m2/comp/char.tab $x/tabgen
	$x/tabgen -flang/m2/comp/char.tab > $@

GEN_FILES = $o/m2/errout.h $o/m2/def.h $o/m2/type.h $o/m2/real.h \
		$o/m2/node.h $(M2_LLGEN_C)

CM2 = -I$h -I$m -I$s/alloc -I$s/flt_arith -I$s/idf -I$s/input -I$s/string -I$s/system -I$o -I$o/m2 -Ilang/m2/comp

$o/m2/casestat.o : $o/m2/casestat.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/casestat.c
$o/m2/char.o : $o/m2/char.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/char.c
$o/m2/chk_expr.o : lang/m2/comp/chk_expr.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/chk_expr.c
$o/m2/code.o : lang/m2/comp/code.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/code.c
$o/m2/cstoper.o : lang/m2/comp/cstoper.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/cstoper.c
$o/m2/declar.o : $o/m2/declar.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/declar.c
$o/m2/def.o : lang/m2/comp/def.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/def.c
$o/m2/defmodule.o : lang/m2/comp/defmodule.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/defmodule.c
$o/m2/desig.o : lang/m2/comp/desig.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/desig.c
$o/m2/enter.o : lang/m2/comp/enter.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/enter.c
$o/m2/error.o : lang/m2/comp/error.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/error.c
$o/m2/expression.o : $o/m2/expression.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/expression.c
$o/m2/idf.o : lang/m2/comp/idf.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/idf.c
$o/m2/input.o : lang/m2/comp/input.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/input.c
$o/m2/LLlex.o : lang/m2/comp/LLlex.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/LLlex.c
$o/m2/LLmessage.o : lang/m2/comp/LLmessage.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/LLmessage.c
$o/m2/Lncor.o : $o/m2/Lncor.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/Lncor.c
$o/m2/lookup.o : lang/m2/comp/lookup.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/lookup.c
$o/m2/Lpars.o : $o/m2/Lpars.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/Lpars.c
$o/m2/main.o : lang/m2/comp/main.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/main.c
$o/m2/misc.o : lang/m2/comp/misc.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/misc.c
$o/m2/next.o : $o/m2/next.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/next.c
$o/m2/node.o : lang/m2/comp/node.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/node.c
$o/m2/options.o : lang/m2/comp/options.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/options.c
$o/m2/program.o : $o/m2/program.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/program.c
$o/m2/scope.o : $o/m2/scope.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/scope.c
$o/m2/stab.o : lang/m2/comp/stab.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/stab.c
$o/m2/statement.o : $o/m2/statement.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/statement.c
$o/m2/sym2str.o : $o/m2/sym2str.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/sym2str.c
$o/m2/tmpvar.o : $o/m2/tmpvar.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/tmpvar.c
$o/m2/tokenfile.o : $o/m2/tokenfile.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) $o/m2/tokenfile.c
$o/m2/tokenname.o : lang/m2/comp/tokenname.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/tokenname.c
$o/m2/type.o : lang/m2/comp/type.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/type.c
$o/m2/typequiv.o : lang/m2/comp/typequiv.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/typequiv.c
$o/m2/walk.o : lang/m2/comp/walk.c
	$(CC) -c -o $@ $(CFLAGS) $(CM2) lang/m2/comp/walk.c

M2_OBJS = $o/m2/casestat.o $o/m2/char.o $o/m2/chk_expr.o $o/m2/code.o \
		$o/m2/cstoper.o $o/m2/declar.o $o/m2/def.o $o/m2/defmodule.o \
		$o/m2/desig.o $o/m2/enter.o $o/m2/error.o $o/m2/expression.o \
		$o/m2/idf.o $o/m2/input.o $o/m2/LLlex.o $o/m2/LLmessage.o \
		$o/m2/Lncor.o $o/m2/Lpars.o $o/m2/lookup.o $o/m2/main.o $o/m2/misc.o \
		$o/m2/next.o $o/m2/node.o $o/m2/options.o $o/m2/program.o \
		$o/m2/scope.o $o/m2/stab.o $o/m2/statement.o $o/m2/sym2str.o \
		$o/m2/tmpvar.o $o/m2/tokenfile.o $o/m2/tokenname.o $o/m2/type.o \
		$o/m2/typequiv.o $o/m2/walk.o

# Sufficient stack to run the tests (default is 32kw)
$l/em_m2 : $(GEN_FILES) $(M2_OBJS) $o/libmodule.a $o/libem_data.a $o/libem_mes.a $o/libemk.a
	$(CC) -stack 48kw -o $@ $(M2_OBJS) -L$o -lem_data -lem_mes -lemk -lmodule

