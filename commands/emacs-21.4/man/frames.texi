@c This is part of the Emacs manual.
@c Copyright (C) 1985, 86, 87, 93, 94, 95, 97, 99, 2000, 2001
@c   Free Software Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Frames, International, Windows, Top
@chapter Frames and X Windows
@cindex frames

  When using the X Window System, you can create multiple windows at the
X level in a single Emacs session.  Each X window that belongs to Emacs
displays a @dfn{frame} which can contain one or several Emacs windows.
A frame initially contains a single general-purpose Emacs window which
you can subdivide vertically or horizontally into smaller windows.  A
frame normally contains its own echo area and minibuffer, but you can
make frames that don't have these---they use the echo area and
minibuffer of another frame.

  Editing you do in one frame also affects the other frames.  For
instance, if you put text in the kill ring in one frame, you can yank it
in another frame.  If you exit Emacs through @kbd{C-x C-c} in one frame,
it terminates all the frames.  To delete just one frame, use @kbd{C-x 5
0} (that is zero, not @kbd{o}).

  To avoid confusion, we reserve the word ``window'' for the
subdivisions that Emacs implements, and never use it to refer to a
frame.

  Emacs compiled for MS-DOS emulates some aspects of the window system
so that you can use many of the features described in this chapter.
@xref{MS-DOS Input}, for more information.

@cindex MS Windows
  Emacs compiled for MS Windows mostly supports the same features as
under X.  However, images, tool bars, and tooltips are not yet
available in Emacs version 21.1 on MS-Windows.

@menu
* Mouse Commands::      Moving, cutting, and pasting, with the mouse.
* Secondary Selection:: Cutting without altering point and mark.
* Clipboard::           Using the clipboard for selections.
* Mouse References::    Using the mouse to select an item from a list.
* Menu Mouse Clicks::   Mouse clicks that bring up menus.
* Mode Line Mouse::     Mouse clicks on the mode line.
* Creating Frames::     Creating additional Emacs frames with various contents.
* Frame Commands::      Iconifying, deleting, and switching frames.
* Speedbar::            How to make and use a speedbar frame.
* Multiple Displays::   How one Emacs job can talk to several displays.
* Special Buffer Frames::  You can make certain buffers have their own frames.
* Frame Parameters::    Changing the colors and other modes of frames.
* Scroll Bars::	        How to enable and disable scroll bars; how to use them.
* Wheeled Mice::        Using mouse wheels for scrolling.
* Menu Bars::	        Enabling and disabling the menu bar.
* Tool Bars::           Enabling and disabling the tool bar.
* Dialog Boxes::        Controlling use of dialog boxes.
* Tooltips::            Showing "tooltips", AKA "balloon help" for active text.
* Mouse Avoidance::     Moving the mouse pointer out of the way.
* Non-Window Terminals::  Multiple frames on terminals that show only one.
* XTerm Mouse::         Using the mouse in an XTerm terminal emulator.
@end menu

@node Mouse Commands
@section Mouse Commands for Editing
@cindex mouse buttons (what they do)

  The mouse commands for selecting and copying a region are mostly
compatible with the @code{xterm} program.  You can use the same mouse
commands for copying between Emacs and other X client programs.

@kindex DELETE @r{(and mouse selection)}
  If you select a region with any of these mouse commands, and then
immediately afterward type the @key{DELETE} function key, it deletes the
region that you selected.  The @key{BACKSPACE} function key and the
ASCII character @key{DEL} do not do this; if you type any other key
in between the mouse command and @key{DELETE}, it does not do this.

@findex mouse-set-region
@findex mouse-set-point
@findex mouse-yank-at-click
@findex mouse-save-then-click
@kindex Mouse-1
@kindex Mouse-2
@kindex Mouse-3
@table @kbd
@item Mouse-1
Move point to where you click (@code{mouse-set-point}).
This is normally the left button.

@item Drag-Mouse-1
Set the region to the text you select by dragging, and copy it to the
kill ring (@code{mouse-set-region}).  You can specify both ends of the
region with this single command.

@vindex mouse-scroll-min-lines
If you move the mouse off the top or bottom of the window while
dragging, the window scrolls at a steady rate until you move the mouse
back into the window.  This way, you can select regions that don't fit
entirely on the screen.  The number of lines scrolled per step depends
on how far away from the window edge the mouse has gone; the variable
@code{mouse-scroll-min-lines} specifies a minimum step size.

@item Mouse-2
Yank the last killed text, where you click (@code{mouse-yank-at-click}).
This is normally the middle button.

@item Mouse-3
This command, @code{mouse-save-then-kill}, has several functions
depending on where you click and the status of the region.

The most basic case is when you click @kbd{Mouse-1} in one place and
then @kbd{Mouse-3} in another.  This selects the text between those two
positions as the region.  It also copies the new region to the kill
ring, so that you can copy it to someplace else.

If you click @kbd{Mouse-1} in the text, scroll with the scroll bar, and
then click @kbd{Mouse-3}, it remembers where point was before scrolling
(where you put it with @kbd{Mouse-1}), and uses that position as the
other end of the region.  This is so that you can select a region that
doesn't fit entirely on the screen.

More generally, if you do not have a highlighted region, @kbd{Mouse-3}
selects the text between point and the click position as the region.  It
does this by setting the mark where point was, and moving point to where
you click.

If you have a highlighted region, or if the region was set just before
by dragging button 1, @kbd{Mouse-3} adjusts the nearer end of the region
by moving it to where you click.  The adjusted region's text also
replaces the old region's text in the kill ring.

If you originally specified the region using a double or triple
@kbd{Mouse-1}, so that the region is defined to consist of entire words
or lines, then adjusting the region with @kbd{Mouse-3} also proceeds by
entire words or lines.

If you use @kbd{Mouse-3} a second time consecutively, at the same place,
that kills the region already selected.

@item Double-Mouse-1
This key sets the region around the word which you click on.  If you
click on a character with ``symbol'' syntax (such as underscore, in C
mode), it sets the region around the symbol surrounding that character.

If you click on a character with open-parenthesis or close-parenthesis
syntax, it sets the region around the parenthetical grouping
which that character starts or ends.  If you click on a character with
string-delimiter syntax (such as a singlequote or doublequote in C), it
sets the region around the string constant (using heuristics to figure
out whether that character is the beginning or the end of it).

@item Double-Drag-Mouse-1
This key selects a region made up of the words you drag across.

@item Triple-Mouse-1
This key sets the region around the line you click on.

@item Triple-Drag-Mouse-1
This key selects a region made up of the lines you drag across.
@end table

  The simplest way to kill text with the mouse is to press @kbd{Mouse-1}
at one end, then press @kbd{Mouse-3} twice at the other end.
@xref{Killing}.  To copy the text into the kill ring without deleting it
from the buffer, press @kbd{Mouse-3} just once---or just drag across the
text with @kbd{Mouse-1}.  Then you can copy it elsewhere by yanking it.

@vindex mouse-yank-at-point
  To yank the killed or copied text somewhere else, move the mouse there
and press @kbd{Mouse-2}.  @xref{Yanking}.  However, if
@code{mouse-yank-at-point} is non-@code{nil}, @kbd{Mouse-2} yanks at
point.  Then it does not matter where you click, or even which of the
frame's windows you click on.  The default value is @code{nil}.  This
variable also affects yanking the secondary selection.

@cindex cutting and X
@cindex pasting and X
@cindex X cutting and pasting
  To copy text to another X window, kill it or save it in the kill ring.
Under X, this also sets the @dfn{primary selection}.  Then use the
``paste'' or ``yank'' command of the program operating the other window
to insert the text from the selection.

  To copy text from another X window, use the ``cut'' or ``copy''
command of the program operating the other window, to select the text
you want.  Then yank it in Emacs with @kbd{C-y} or @kbd{Mouse-2}.

  The standard coding system for X selections is @code{compound-text}.
To specify another coding system for X selections, use @kbd{C-x
@key{RET} x} or @kbd{C-x @key{RET} X}.  @xref{Specify Coding}.

  These cutting and pasting commands also work on MS-Windows.

@cindex primary selection
@cindex cut buffer
@cindex selection, primary
@vindex x-cut-buffer-max
  When Emacs puts text into the kill ring, or rotates text to the front
of the kill ring, it sets the @dfn{primary selection} in the X server.
This is how other X clients can access the text.  Emacs also stores the
text in the cut buffer, but only if the text is short enough
(the value of @code{x-cut-buffer-max} specifies the maximum number of
characters); putting long strings in the cut buffer can be slow.

  The commands to yank the first entry in the kill ring actually check
first for a primary selection in another program; after that, they check
for text in the cut buffer.  If neither of those sources provides text
to yank, the kill ring contents are used.

@node Secondary Selection
@section Secondary Selection
@cindex secondary selection

  The @dfn{secondary selection} is another way of selecting text using
X.  It does not use point or the mark, so you can use it to kill text
without setting point or the mark.

@table @kbd
@findex mouse-set-secondary
@kindex M-Drag-Mouse-1
@item M-Drag-Mouse-1
Set the secondary selection, with one end at the place where you press
down the button, and the other end at the place where you release it
(@code{mouse-set-secondary}).  The highlighting appears and changes as
you drag.  You can control the appearance of the highlighting by
customizing the @code{secondary-selection} face (@pxref{Face
Customization}).

If you move the mouse off the top or bottom of the window while
dragging, the window scrolls at a steady rate until you move the mouse
back into the window.  This way, you can mark regions that don't fit
entirely on the screen.

@findex mouse-start-secondary
@kindex M-Mouse-1
@item M-Mouse-1
Set one endpoint for the @dfn{secondary selection}
(@code{mouse-start-secondary}).

@findex mouse-secondary-save-then-kill
@kindex M-Mouse-3
@item M-Mouse-3
Make a secondary selection, using the place specified with @kbd{M-Mouse-1}
as the other end (@code{mouse-secondary-save-then-kill}).  A second click
at the same place kills the secondary selection just made.

@findex mouse-yank-secondary
@kindex M-Mouse-2
@item M-Mouse-2
Insert the secondary selection where you click
(@code{mouse-yank-secondary}).  This places point at the end of the
yanked text.
@end table

Double or triple clicking of @kbd{M-Mouse-1} operates on words and
lines, much like @kbd{Mouse-1}.

If @code{mouse-yank-at-point} is non-@code{nil}, @kbd{M-Mouse-2}
yanks at point.  Then it does not matter precisely where you click; all
that matters is which window you click on.  @xref{Mouse Commands}.

@node Clipboard
@section Using the Clipboard
@cindex X clipboard
@cindex clipboard
@vindex x-select-enable-clipboard
@findex menu-bar-enable-clipboard
@cindex OpenWindows
@cindex Gnome

  As well as the primary and secondary selection types, X supports a
@dfn{clipboard} selection type which is used by some applications,
particularly under OpenWindows and Gnome.

  The command @kbd{M-x menu-bar-enable-clipboard} makes the @code{Cut},
@code{Paste} and @code{Copy} menu items, as well as the keys of the same
names, all use the clipboard.
 
  You can customize the option @code{x-select-enable-clipboard} to make
the Emacs yank functions consult the clipboard before the primary
selection, and to make the kill functions to store in the clipboard as
well as the primary selection.  Otherwise they do not access the
clipboard at all.  Using the clipboard is the default on MS-Windows,
unlike most systems.

@node Mouse References
@section Following References with the Mouse
@kindex Mouse-2 @r{(selection)}

  Some Emacs buffers display lists of various sorts.  These include
lists of files, of buffers, of possible completions, of matches for
a pattern, and so on.

  Since yanking text into these buffers is not very useful, most of them
define @kbd{Mouse-2} specially, as a command to use or view the item you
click on.

  For example, if you click @kbd{Mouse-2} on a file name in a Dired
buffer, you visit that file.  If you click @kbd{Mouse-2} on an error
message in the @samp{*Compilation*} buffer, you go to the source code
for that error message.  If you click @kbd{Mouse-2} on a completion in
the @samp{*Completions*} buffer, you choose that completion.

  You can usually tell when @kbd{Mouse-2} has this special sort of
meaning because the sensitive text highlights when you move the mouse
over it.

@node Menu Mouse Clicks
@section Mouse Clicks for Menus

  Mouse clicks modified with the @key{CTRL} and @key{SHIFT} keys
bring up menus.

@table @kbd
@item C-Mouse-1
@kindex C-Mouse-1
This menu is for selecting a buffer.

The MSB (``mouse select buffer'') global minor mode makes this
menu smarter and more customizable.  @xref{Buffer Menus}.

@item C-Mouse-2
@kindex C-Mouse-2
This menu is for specifying faces and other text properties
for editing formatted text.  @xref{Formatted Text}.

@item C-Mouse-3
@kindex C-Mouse-3
This menu is mode-specific.  For most modes if Menu-bar mode is on, this
menu has the same items as all the mode-specific menu-bar menus put
together.  Some modes may specify a different menu for this
button.@footnote{Some systems use @kbd{Mouse-3} for a mode-specific
menu.  We took a survey of users, and found they preferred to keep
@kbd{Mouse-3} for selecting and killing regions.  Hence the decision to
use @kbd{C-Mouse-3} for this menu.}  If Menu-bar mode is off, this menu
contains all the items which would be present in the menu bar---not just
the mode-specific ones---so that you can access them without having to
display the menu bar.

@item S-Mouse-1
This menu is for specifying the frame's principal font.
@end table

@node Mode Line Mouse
@section Mode Line Mouse Commands
@cindex mode line, mouse
@cindex mouse on mode line

  You can use mouse clicks on window mode lines to select and manipulate
windows.

@table @kbd
@item Mouse-1
@kindex Mouse-1 @r{(mode line)}
@kbd{Mouse-1} on a mode line selects the window above.  By dragging
@kbd{Mouse-1} on the mode line, you can move it, thus changing the
height of the windows above and below.

@item Mouse-2
@kindex Mouse-2 @r{(mode line)}
@kbd{Mouse-2} on a mode line expands that window to fill its frame.

@item Mouse-3
@kindex Mouse-3 @r{(mode line)}
@kbd{Mouse-3} on a mode line deletes the window above.  If the frame has
only one window, it buries the current buffer instead and switches to
another buffer.

@item C-Mouse-2
@kindex C-mouse-2 @r{(mode line)}
@kbd{C-Mouse-2} on a mode line splits the window above
horizontally, above the place in the mode line where you click.
@end table

@kindex C-Mouse-2 @r{(scroll bar)}
  @kbd{C-Mouse-2} on a scroll bar splits the corresponding window
vertically, unless you are using an X toolkit's implementation of
scroll bars.  @xref{Split Window}.

  The commands above apply to areas of the mode line which do not have
special mouse bindings of their own.  Some areas, such as the buffer
name and the major mode name, have their own special mouse bindings.
Emacs displays information about these bindings when you hold the
mouse over such a place (@pxref{Tooltips}).

@node Creating Frames
@section Creating Frames
@cindex creating frames

@kindex C-x 5
  The prefix key @kbd{C-x 5} is analogous to @kbd{C-x 4}, with parallel
subcommands.  The difference is that @kbd{C-x 5} commands create a new
frame rather than just a new window in the selected frame (@pxref{Pop
Up Window}).  If an existing visible or iconified frame already displays
the requested material, these commands use the existing frame, after
raising or deiconifying as necessary. 

  The various @kbd{C-x 5} commands differ in how they find or create the
buffer to select:

@table @kbd
@item C-x 5 2
@kindex C-x 5 2
@findex make-frame-command
Create a new frame (@code{make-frame-command}).
@item C-x 5 b @var{bufname} @key{RET}
Select buffer @var{bufname} in another frame.  This runs
@code{switch-to-buffer-other-frame}.
@item C-x 5 f @var{filename} @key{RET}
Visit file @var{filename} and select its buffer in another frame.  This
runs @code{find-file-other-frame}.  @xref{Visiting}.
@item C-x 5 d @var{directory} @key{RET}
Select a Dired buffer for directory @var{directory} in another frame.
This runs @code{dired-other-frame}.  @xref{Dired}.
@item C-x 5 m
Start composing a mail message in another frame.  This runs
@code{mail-other-frame}.  It is the other-frame variant of @kbd{C-x m}.
@xref{Sending Mail}.
@item C-x 5 .
Find a tag in the current tag table in another frame.  This runs
@code{find-tag-other-frame}, the multiple-frame variant of @kbd{M-.}.
@xref{Tags}.
@item C-x 5 r @var{filename} @key{RET}
@kindex C-x 5 r
@findex find-file-read-only-other-frame
Visit file @var{filename} read-only, and select its buffer in another
frame.  This runs @code{find-file-read-only-other-frame}.
@xref{Visiting}.
@end table

@cindex default-frame-alist
@cindex initial-frame-alist
  You can control the appearance of new frames you create by setting the
frame parameters in @code{default-frame-alist}.  You can use the
variable @code{initial-frame-alist} to specify parameters that affect
only the initial frame.  @xref{Initial Parameters,,, elisp, The Emacs
Lisp Reference Manual}, for more information.

@cindex font (default)
  The easiest way to specify the principal font for all your Emacs
frames is with an X resource (@pxref{Font X}), but you can also do it by
modifying @code{default-frame-alist} to specify the @code{font}
parameter, as shown here:

@example
(add-to-list 'default-frame-alist '(font . "10x20"))
@end example

@noindent
Here's a similar example for specifying a foreground color:

@example
(add-to-list 'default-frame-alist '(background-color . "blue"))
@end example


@node Frame Commands
@section Frame Commands

  The following commands let you create, delete and operate on frames:

@table @kbd
@item C-z
@kindex C-z @r{(X windows)}
@findex iconify-or-deiconify-frame
Iconify the selected Emacs frame (@code{iconify-or-deiconify-frame}).
The normal meaning of @kbd{C-z}, to suspend Emacs, is not useful under a
window system, so it has a different binding in that case.

If you type this command on an Emacs frame's icon, it deiconifies the frame.

@item C-x 5 0
@kindex C-x 5 0
@findex delete-frame
Delete the selected frame (@code{delete-frame}).  This is not allowed if
there is only one frame.

@item C-x 5 o
@kindex C-x 5 o
@findex other-frame
Select another frame, raise it, and warp the mouse to it so that it
stays selected.  If you repeat this command, it cycles through all the
frames on your terminal.

@item C-x 5 1
@kindex C-x 5 1
@findex delete-other-frames
Delete all frames except the selected one.
@end table

@node Speedbar
@section Making and Using a Speedbar Frame
@cindex speedbar

  An Emacs frame can have a @dfn{speedbar}, which is a vertical window
that serves as a scrollable menu of files you could visit and tags
within those files.  To create a speedbar, type @kbd{M-x speedbar}; this
creates a speedbar window for the selected frame.  From then on, you can
click on a file name in the speedbar to visit that file in the
corresponding Emacs frame, or click on a tag name to jump to that tag in
the Emacs frame.

  Initially the speedbar lists the immediate contents of the current
directory, one file per line.  Each line also has a box, @samp{[+]} or
@samp{<+>}, that you can click on with @kbd{Mouse-2} to ``open up'' the
contents of that item.  If the line names a directory, opening it adds
the contents of that directory to the speedbar display, underneath the
directory's own line.  If the line lists an ordinary file, opening it up
adds a list of the tags in that file to the speedbar display.  When a
file is opened up, the @samp{[+]} changes to @samp{[-]}; you can click
on that box to ``close up'' that file (hide its contents).

  Some major modes, including Rmail mode, Info, and GUD, have
specialized ways of putting useful items into the speedbar for you to
select.  For example, in Rmail mode, the speedbar shows a list of Rmail
files, and lets you move the current message to another Rmail file by
clicking on its @samp{<M>} box.

  A speedbar belongs to one Emacs frame, and always operates on that
frame.  If you use multiple frames, you can make a speedbar for some or
all of the frames; type @kbd{M-x speedbar} in any given frame to make a
speedbar for it.

@node Multiple Displays
@section Multiple Displays
@cindex multiple displays

  A single Emacs can talk to more than one X display.  Initially, Emacs
uses just one display---the one specified with the @env{DISPLAY}
environment variable or with the @samp{--display} option (@pxref{Initial
Options}).  To connect to another display, use the command
@code{make-frame-on-display}:

@findex make-frame-on-display
@table @kbd
@item M-x make-frame-on-display @key{RET} @var{display} @key{RET}
Create a new frame on display @var{display}.
@end table

  A single X server can handle more than one screen.  When you open
frames on two screens belonging to one server, Emacs knows they share a
single keyboard, and it treats all the commands arriving from these
screens as a single stream of input.

  When you open frames on different X servers, Emacs makes a separate
input stream for each server.  This way, two users can type
simultaneously on the two displays, and Emacs will not garble their
input.  Each server also has its own selected frame.  The commands you
enter with a particular X server apply to that server's selected frame.

  Despite these features, people using the same Emacs job from different
displays can still interfere with each other if they are not careful.
For example, if any one types @kbd{C-x C-c}, that exits the Emacs job
for all of them!

@node Special Buffer Frames
@section Special Buffer Frames

@vindex special-display-buffer-names
  You can make certain chosen buffers, for which Emacs normally creates
a second window when you have just one window, appear in special frames
of their own.  To do this, set the variable
@code{special-display-buffer-names} to a list of buffer names; any
buffer whose name is in that list automatically gets a special frame,
when an Emacs command wants to display it ``in another window.''

  For example, if you set the variable this way,

@example
(setq special-display-buffer-names
      '("*Completions*" "*grep*" "*tex-shell*"))
@end example

@noindent
then completion lists, @code{grep} output and the @TeX{} mode shell
buffer get individual frames of their own.  These frames, and the
windows in them, are never automatically split or reused for any other
buffers.  They continue to show the buffers they were created for,
unless you alter them by hand.  Killing the special buffer deletes its
frame automatically.

@vindex special-display-regexps
  More generally, you can set @code{special-display-regexps} to a list
of regular expressions; then a buffer gets its own frame if its name
matches any of those regular expressions.  (Once again, this applies only
to buffers that normally get displayed for you in a separate window.)

@vindex special-display-frame-alist
  The variable @code{special-display-frame-alist} specifies the frame
parameters for these frames.  It has a default value, so you don't need
to set it.

  For those who know Lisp, an element of
@code{special-display-buffer-names} or @code{special-display-regexps}
can also be a list.  Then the first element is the buffer name or
regular expression; the rest of the list specifies how to create the
frame.  It can be an association list specifying frame parameter values;
these values take precedence over parameter values specified in
@code{special-display-frame-alist}.  Alternatively, it can have this
form:

@example
(@var{function} @var{args}...)
@end example

@noindent
where @var{function} is a symbol.  Then the frame is constructed by
calling @var{function}; its first argument is the buffer, and its
remaining arguments are @var{args}.

   An analogous feature lets you specify buffers which should be
displayed in the selected window.  @xref{Force Same Window}.  The
same-window feature takes precedence over the special-frame feature;
therefore, if you add a buffer name to
@code{special-display-buffer-names} and it has no effect, check to see
whether that feature is also in use for the same buffer name.

@node Frame Parameters
@section Setting Frame Parameters
@cindex colors
@cindex Auto-Raise mode
@cindex Auto-Lower mode

  This section describes commands for altering the display style and
window management behavior of the selected frame.

@findex set-foreground-color
@findex set-background-color
@findex set-cursor-color
@findex set-mouse-color
@findex set-border-color
@findex auto-raise-mode
@findex auto-lower-mode
@table @kbd
@item M-x set-foreground-color @key{RET} @var{color} @key{RET}
Specify color @var{color} for the foreground of the selected frame.
(This also changes the foreground color of the default face.)

@item M-x set-background-color @key{RET} @var{color} @key{RET}
Specify color @var{color} for the background of the selected frame.
(This also changes the background color of the default face.)

@item M-x set-cursor-color @key{RET} @var{color} @key{RET}
Specify color @var{color} for the cursor of the selected frame.

@item M-x set-mouse-color @key{RET} @var{color} @key{RET}
Specify color @var{color} for the mouse cursor when it is over the
selected frame.

@item M-x set-border-color @key{RET} @var{color} @key{RET}
Specify color @var{color} for the border of the selected frame.

@item M-x list-colors-display
Display the defined color names and show what the colors look like.
This command is somewhat slow.

@item M-x auto-raise-mode
Toggle whether or not the selected frame should auto-raise.  Auto-raise
means that every time you move the mouse onto the frame, it raises the
frame.

Note that this auto-raise feature is implemented by Emacs itself.  Some
window managers also implement auto-raise.  If you enable auto-raise for
Emacs frames in your X window manager, it should work, but it is beyond
Emacs's control and therefore @code{auto-raise-mode} has no effect on
it.

@item M-x auto-lower-mode
Toggle whether or not the selected frame should auto-lower.
Auto-lower means that every time you move the mouse off the frame,
the frame moves to the bottom of the stack of X windows.

The command @code{auto-lower-mode} has no effect on auto-lower
implemented by the X window manager.  To control that, you must use
the appropriate window manager features.

@findex set-frame-font
@item M-x set-frame-font @key{RET} @var{font} @key{RET}
@cindex font (principal)
Specify font @var{font} as the principal font for the selected frame.
The principal font controls several face attributes of the
@code{default} face (@pxref{Faces}).  For example, if the principal font
has a height of 12 pt, all text will be drawn in 12 pt fonts, unless you
use another face that specifies a different height.  @xref{Font X}, for
ways to list the available fonts on your system.

@kindex S-Mouse-1
You can also set a frame's principal font through a pop-up menu.
Press @kbd{S-Mouse-1} to activate this menu.
@end table

  In Emacs versions that use an X toolkit, the color-setting and
font-setting functions don't affect menus and the menu bar, since they
are displayed by their own widget classes.  To change the appearance of
the menus and menu bar, you must use X resources (@pxref{Resources X}).
@xref{Colors X}, regarding colors.  @xref{Font X}, regarding choice of
font.

  Colors, fonts, and other attributes of the frame's display can also
be customized by setting frame parameters in the variable
@code{default-frame-alist} (@pxref{Creating Frames}).  For a detailed
description of frame parameters and customization, see @ref{Frame
Parameters,,, elisp, The Emacs Lisp Reference Manual}.

@node Scroll Bars
@section Scroll Bars
@cindex Scroll Bar mode
@cindex mode, Scroll Bar

  When using X, Emacs normally makes a @dfn{scroll bar} at the left of
each Emacs window.@footnote{Placing it at the left is usually more
useful with overlapping frames with text starting at the left margin.}
The scroll bar runs the height of the window, and shows a moving
rectangular inner box which represents the portion of the buffer
currently displayed.  The entire height of the scroll bar represents the
entire length of the buffer.

  You can use @kbd{Mouse-2} (normally, the middle button) in the scroll
bar to move or drag the inner box up and down.  If you move it to the
top of the scroll bar, you see the top of the buffer.  If you move it to
the bottom of the scroll bar, you see the bottom of the buffer.

  The left and right buttons in the scroll bar scroll by controlled
increments.  @kbd{Mouse-1} (normally, the left button) moves the line at
the level where you click up to the top of the window.  @kbd{Mouse-3}
(normally, the right button) moves the line at the top of the window
down to the level where you click.  By clicking repeatedly in the same
place, you can scroll by the same distance over and over.

  If you are using Emacs's own implementation of scroll bars, as opposed
to scroll bars from an X toolkit, you can also click @kbd{C-Mouse-2} in
the scroll bar to split a window vertically.  The split occurs on the
line where you click.

@findex scroll-bar-mode
@vindex scroll-bar-mode
  You can enable or disable Scroll Bar mode with the command @kbd{M-x
scroll-bar-mode}.  With no argument, it toggles the use of scroll bars.
With an argument, it turns use of scroll bars on if and only if the
argument is positive.  This command applies to all frames, including
frames yet to be created.  Customize the option @code{scroll-bar-mode}
to control the use of scroll bars at startup.  You can use it to specify
that they are placed at the right of windows if you prefer that.  You
can use the X resource @samp{verticalScrollBars} to control the initial
setting of Scroll Bar mode similarly.  @xref{Resources X}.

@findex toggle-scroll-bar
  To enable or disable scroll bars for just the selected frame, use the
@kbd{M-x toggle-scroll-bar} command.

@vindex scroll-bar-width
@cindex width of the scroll bar
  You can control the scroll bar width by changing the value of the
@code{scroll-bar-width} frame parameter.

@node Wheeled Mice
@section Scrolling With ``Wheeled'' Mice

@cindex mouse wheel
@cindex wheel, mouse
@findex mouse-wheel-mode
@cindex Mouse Wheel minor mode
@cindex mode, Mouse Wheel
  Some mice have a ``wheel'' instead of a third button.  You can
usually click the wheel to act as either @kbd{Mouse-2} or
@kbd{Mouse-3}, depending on the setup.  You can also use the wheel to
scroll windows instead of using the scroll bar or keyboard commands.
To do so, turn on Mouse Wheel global minor mode with the command
@kbd{M-x mouse-wheel-mode} or by customizing the option
@code{mouse-wheel-mode}.  Support for the wheel depends on the system
generating appropriate events for Emacs.

@vindex mouse-wheel-follow-mouse
@vindex mouse-wheel-scroll-amount
  The variables @code{mouse-wheel-follow-mouse} and
@code{mouse-wheel-scroll-amount} determine where and by how much
buffers are scrolled.

@node Menu Bars
@section Menu Bars
@cindex Menu Bar mode
@cindex mode, Menu Bar

  You can turn display of menu bars on or off with @kbd{M-x
menu-bar-mode} or by customizing the option @code{menu-bar-mode}.
With no argument, this command toggles Menu Bar mode, a
minor mode.  With an argument, the command turns Menu Bar mode on if the
argument is positive, off if the argument is not positive.  You can use
the X resource @samp{menuBarLines} to control the initial setting of
Menu Bar mode.  @xref{Resources X}.

@kindex C-Mouse-3 @r{(when menu bar is disabled)}
  Expert users often turn off the menu bar, especially on text-only
terminals, where this makes one additional line available for text.
If the menu bar is off, you can still pop up a menu of its contents
with @kbd{C-Mouse-3} on a display which supports pop-up menus.
@xref{Menu Mouse Clicks}.

  @xref{Menu Bar}, for information on how to invoke commands with the
menu bar.

@node Tool Bars
@section Tool Bars
@cindex Tool Bar mode
@cindex mode, Tool Bar
@cindex icons, tool bar

The @dfn{tool bar} is a line (or multiple lines) of icons at the top
of the Emacs window.  You can click on these icons with the mouse
to do various jobs.

The global tool bar contains general commands.  Some major modes
define their own tool bars to replace it.  A few ``special'' modes
that are not designed for ordinary editing remove some items from the
global tool bar.

Tool bars work only on a graphical display.  The tool bar uses colored
XPM icons if Emacs was built with XPM support.  Otherwise, the tool
bar uses monochrome icons (PBM or XBM format).

You can turn display of tool bars on or off with @kbd{M-x
tool-bar-mode}.

@node Dialog Boxes
@section Using Dialog Boxes
@cindex dialog boxes

@vindex use-dialog-box
  A dialog box is a special kind of menu for asking you a yes-or-no
question or some other special question.  Many Emacs commands use a
dialog box to ask a yes-or-no question, if you used the mouse to
invoke the command to begin with.

  You can customize the option @code{use-dialog-box} to suppress the
use of dialog boxes.  This also controls whether to use file selection
windows (but those are not supported on all platforms).

@node Tooltips
@section Tooltips (or ``Balloon Help'')

@cindex balloon help
  Tooltips are small X windows displaying a help string at the current
mouse position, typically over text---including the mode line---which
can be activated with the mouse or other keys.  (This facility is
sometimes known as @dfn{balloon help}.)  Help text may be available for
menu items too.

@findex tooltip-mode
  To use tooltips, enable Tooltip mode with the command @kbd{M-x
tooltip-mode}.  The customization group @code{tooltip} controls
various aspects of how tooltips work.  When Tooltip mode is disabled,
the help text is displayed in the echo area instead.

  As of Emacs 21.1, tooltips are not supported on MS-Windows.
So help text always appears in the echo area.

@node Mouse Avoidance
@section Mouse Avoidance
@cindex avoiding mouse in the way of your typing
@cindex mouse avoidance

@vindex mouse-avoidance-mode
Mouse Avoidance mode keeps the window system mouse pointer away from
point, to avoid obscuring text.  Whenever it moves the mouse, it also
raises the frame.  To use Mouse Avoidance mode, customize the option
@code{mouse-avoidance-mode}.  You can set this to various values to
move the mouse in several ways:

@table @code
@item banish
Move the mouse to the upper-right corner on any key-press;
@item exile
Move the mouse to the corner only if the cursor gets too close,
and allow it to return once the cursor is out of the way;
@item jump
If the cursor gets too close to the mouse, displace the mouse
a random distance & direction;
@item animate
As @code{jump}, but shows steps along the way for illusion of motion;
@item cat-and-mouse
The same as @code{animate};
@item proteus
As @code{animate}, but changes the shape of the mouse pointer too.
@end table

@findex mouse-avoidance-mode
You can also use the command @kbd{M-x mouse-avoidance-mode} to enable
the mode.

@node Non-Window Terminals
@section Non-Window Terminals
@cindex non-window terminals
@cindex single-frame terminals

  If your terminal does not have a window system that Emacs supports,
then it can display only one Emacs frame at a time.  However, you can
still create multiple Emacs frames, and switch between them.  Switching
frames on these terminals is much like switching between different
window configurations.

  Use @kbd{C-x 5 2} to create a new frame and switch to it; use @kbd{C-x
5 o} to cycle through the existing frames; use @kbd{C-x 5 0} to delete
the current frame.

  Each frame has a number to distinguish it.  If your terminal can
display only one frame at a time, the selected frame's number @var{n}
appears near the beginning of the mode line, in the form
@samp{F@var{n}}.

@findex set-frame-name
@findex select-frame-by-name
  @samp{F@var{n}} is actually the frame's name.  You can also specify a
different name if you wish, and you can select a frame by its name.  Use
the command @kbd{M-x set-frame-name @key{RET} @var{name} @key{RET}} to
specify a new name for the selected frame, and use @kbd{M-x
select-frame-by-name @key{RET} @var{name} @key{RET}} to select a frame
according to its name.  The name you specify appears in the mode line
when the frame is selected.

@node XTerm Mouse
@section Using a Mouse in Terminal Emulators
@cindex xterm, mouse support
@cindex terminal emulators, mouse support

Some terminal emulators under X support mouse clicks in the terminal
window.  In a terminal emulator which is compatible with @code{xterm},
you can use @kbd{M-x xterm-mouse-mode} to enable simple use of the
mouse---only single clicks are supported.  The normal @code{xterm} mouse
functionality is still available by holding down the @kbd{SHIFT} key
when you press the mouse button.  The Linux console supports this
mode if it has support for the mouse enabled, e.g.@: using the
@command{gpm} daemon.
