# Generated automatically from Makefile.in by configure.
# Maintenance productions for the Lisp directory
# Copyright (C) 2000, 2001 Free Software Foundation, Inc.

# This file is part of GNU Emacs.

# GNU Emacs is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

SHELL = /bin/sh

lisp=/net/tmp/emacs-21.4/lisp
VPATH=/net/tmp/emacs-21.4/lisp
srcdir=/net/tmp/emacs-21.4/lisp/..

# You can specify a different executable on the make command line,
# e.g. "make EMACS=../src/emacs ...".

EMACS = ../src/emacs

# Command line flags for Emacs.  This must include --multibyte,
# otherwise some files will not compile.

EMACSOPT = -batch --no-site-file --multibyte

SOURCES = *.el COPYING Makefile
lisptagsfiles1 = $(lisp)/[a-zA-Z]*.el
lisptagsfiles2 = $(lisp)/[a-zA-Z]*/[a-zA-Z]*.el
ETAGS = ../lib-src/etags

# Files which should not be compiled.  If you change the name `DONTCOMPILE'
# to something different, you'll have to change make-dist as well.
#
# - emacs-lisp/cl-specs.el:  only contains `def-edebug-spec's so there's
#   no point compiling it, although it doesn't hurt.

DONTCOMPILE = \
	$(lisp)/cus-load.el \
	$(lisp)/cus-start.el \
	$(lisp)/emacs-lisp/cl-specs.el \
	$(lisp)/eshell/esh-maint.el \
	$(lisp)/eshell/esh-groups.el \
	$(lisp)/finder-inf.el \
	$(lisp)/forms-d2.el \
	$(lisp)/forms-pass.el \
	$(lisp)/generic-x.el \
	$(lisp)/international/latin-1.el \
	$(lisp)/international/latin-2.el \
	$(lisp)/international/latin-3.el \
	$(lisp)/international/latin-4.el \
	$(lisp)/international/latin-5.el \
	$(lisp)/international/latin-8.el \
	$(lisp)/international/latin-9.el \
	$(lisp)/international/mule-conf.el \
	$(lisp)/loaddefs.el \
	$(lisp)/loadup.el \
	$(lisp)/mail/blessmail.el \
	$(lisp)/patcomp.el \
	$(lisp)/paths.el \
	$(lisp)/play/bruce.el \
	$(lisp)/subdirs.el \
	$(lisp)/term/internal.el \
	$(lisp)/term/AT386.el  \
	$(lisp)/term/apollo.el \
	$(lisp)/term/bobcat.el \
	$(lisp)/term/iris-ansi.el \
	$(lisp)/term/keyswap.el \
	$(lisp)/term/linux.el \
	$(lisp)/term/lk201.el \
	$(lisp)/term/news.el \
	$(lisp)/term/vt102.el \
	$(lisp)/term/vt125.el \
	$(lisp)/term/vt200.el \
	$(lisp)/term/vt201.el \
	$(lisp)/term/vt220.el \
	$(lisp)/term/vt240.el \
	$(lisp)/term/vt300.el \
	$(lisp)/term/vt320.el \
	$(lisp)/term/vt400.el \
	$(lisp)/term/vt420.el \
	$(lisp)/term/wyse50.el \
	$(lisp)/term/xterm.el \
	$(lisp)/version.el

# Files to compile before others during a bootstrap.  This is done to
# speed up the bootstrap process.  The CC files are compiled first
# because CC mode tweaks the compilation process, and requiring
# cc-mode when it is not compiled doesn't work during the
# bootstrapping.

COMPILE_FIRST = \
	$(lisp)/emacs-lisp/byte-opt.el \
	$(lisp)/emacs-lisp/bytecomp.el \
	$(lisp)/subr.el \
	$(lisp)/progmodes/cc-mode.el \
	$(lisp)/progmodes/cc-vars.el

# The actual Emacs command run in the targets below.

emacs = EMACSLOADPATH=$(lisp) $(EMACS) $(EMACSOPT)

# Common command to find subdirectories

setwins=subdirs=`find $$wd -type d -print`; \
	for file in $$subdirs; do \
	   case $$file in */Old | */RCS | */CVS | */CVS/* | */=* ) ;; \
		*) wins="$$wins $$file" ;; \
	   esac; \
        done

finder_setwins=subdirs=`find $$wd -type d -print`; \
	for file in $$subdirs; do \
	   case $$file in */Old | */RCS | */CVS | */CVS/* | */=* | */obsolete | */term) ;; \
		*) wins="$$wins $$file" ;; \
	   esac; \
        done

doit:

cus-load.el:
	touch $@
custom-deps: cus-load.el doit
	wd=$(lisp); $(setwins); \
	echo Directories: $$wins; \
	$(EMACS) $(EMACSOPT) -l cus-dep -f custom-make-dependencies $$wins

finder-inf.el:
	echo "(provide 'finder-inf)" >> $@
finder-data: finder-inf.el doit
	wd=$(lisp); $(finder_setwins); \
	echo Directories: $$wins; \
	$(EMACS) $(EMACSOPT) -l finder -f finder-compile-keywords-make-dist $$wins

loaddefs.el:
	echo ";;; loaddefs.el --- automatically extracted autoloads" >> $@
	echo ";;" >> $@; echo ";;; Code:" >> $@
	echo "" >> $@
	echo ";;; Local Variables:" >> $@
	echo ";;; version-control: never" >> $@
	echo ";;; no-byte-compile: t" >> $@
	echo ";;; no-update-autoloads: t" >> $@
	echo ";;; End:" >> $@
	echo ";;; loaddefs.el ends here" >> $@
autoloads: loaddefs.el doit
	wd=$(lisp); $(setwins); \
	echo Directories: $$wins; \
	$(EMACS) $(EMACSOPT) -l autoload --eval '(setq generated-autoload-file "$(lisp)/loaddefs.el")' -f batch-update-autoloads $$wins

subdirs.el:
	$(MAKE) $(MFLAGS) update-subdirs
update-subdirs: doit
	wd=$(lisp); $(setwins); \
	for file in $$wins; do \
	   sh $(srcdir)/update-subdirs $$file; \
	done;

updates: update-subdirs autoloads finder-data custom-deps

# Update the AUTHORS file.

update-authors:
	$(emacs) -f batch-update-authors $(srcdir)/AUTHORS $(srcdir)

TAGS: $(lisptagsfiles1) $(lisptagsfiles2)
	els=`echo $(lisptagsfiles1) $(lisptagsfiles2) | sed -e "s,$(lisp)/loaddefs.el,,"`; \
	${ETAGS} $$els

TAGS-LISP: $(lisptagsfiles1) $(lisptagsfiles2)
	els=`echo $(lisptagsfiles1) $(lisptagsfiles2) | sed -e "s,$(lisp)/loaddefs.el,,"`; \
	${ETAGS} -o TAGS-LISP $$els

.SUFFIXES: .elc .el

.el.elc: subdirs.el
	-$(emacs) -f batch-byte-compile $<

#$(DONTCOMPILE:.el=.elc):
#	-rm -f $@

# Compile all Lisp files, except those from DONTCOMPILE.  This
# compiles files unconditionally.  All .elc files are made writable
# before compilation in case we checked out read-only (CVS option -r).
# Files MUST be compiled one by one.  If we compile several files in a
# row we can't make sure that the compilation environment is clean.
# We also set the load-path of the Emacs used for compilation to the
# current directory and its subdirectories, to make sure require's and
# load's in the files being compiled find the right files.

compile-files: subdirs.el doit
	find $(lisp) -name "*.elc" -print | xargs chmod +w >/dev/null 2>&1 || true; \
	wd=$(lisp); $(setwins);	\
	elpat=`echo $$wins | tr ' 	' '\012\012' | \
		sed -e 's|\(.\)$$|\1/|' -e 's|^\./||' -e 's|$$|*.el|'`;	\
	els=`echo $$elpat $(DONTCOMPILE) $(COMPILE_FIRST) | \
		tr '	 ' '\012\012' | sort | uniq -u`; \
	for el in $(COMPILE_FIRST) $$els; do \
	  echo Compiling $$el; \
	  $(emacs) -f batch-byte-compile $$el || exit 1; \
	done

# Backup compiled Lisp files in elc.tar.gz.  If that file already
# exists, make a backup of it.

backup-compiled-files:
	-mv $(lisp)/elc.tar.gz $(lisp)/elc.tar.gz~
	-tar czf $(lisp)/elc.tar.gz $(lisp)/*.elc $(lisp)/*/*.elc

# Compile Lisp files, but save old compiled files first.

compile: backup-compiled-files compile-files

# Recompile all Lisp files which are newer than their .elc files.
# Note that this doesn't create .elc files.  It only recompiles if an
# .elc is present.

recompile: doit
	$(EMACS) $(EMACSOPT) -f batch-byte-recompile-directory $(lisp)

# Prepare a bootstrap in the lisp subdirectory.  Build loaddefs.el,
# because it's not sure it's up-to-date, and if it's not, that might
# lead to errors during the bootstrap because something fails to
# autoload as expected.  Remove compiled Lisp files so that
# bootstrap-emacs will be built from sources only.

bootstrap-clean:
	if test -f $(EMACS); then $(MAKE) $(MFLAGS) autoloads; fi
	-rm -f $(lisp)/*.elc $(lisp)/*/*.elc

# Generate/update files for the bootstrap process.

bootstrap: autoloads compile-files custom-deps

distclean:
	-rm -f $(lisp)/Makefile

# Makefile ends here.
