		      Building and Installing Emacs
		on Windows NT/2000 and Windows 95/98/ME

  Copyright (c) 2001 Free Software Foundation, Inc.
  See the end of the file for copying permissions.

  If you used WinZip to unpack the distribution, we suggest to
  remove the files and unpack again with a different program!
  WinZip is known to create some subtle and hard to debug problems,
  such as converting files to DOS CR-LF format, not creating empty 
  directories, etc.  We suggest to use djtarnt.exe from the GNU FTP
  site.

  To compile Emacs, you will need either Microsoft Visual C++ 2.0 or
  later and nmake, or a Windows port of GCC 2.95 or later with Mingw
  and W32 API support and a port of GNU make.  You can use the Cygwin
  ports of GCC, but Emacs requires the Mingw headers and libraries to
  build (latest versions of the Cygwin toolkit, at least since v1.3.3,
  include the MinGW headers and libraries as an integral part).

  If you build Emacs on Windows 9X or ME, not on Windows 2000 or
  Windows NT, we suggest to install the Cygwin port of Bash.

  Please see http://www.mingw.org for pointers to GCC/Mingw binaries.

  For reference, here is a list of which builds of GNU make are known
  to work or not, and whether they work in the presence and/or absence
  of sh.exe, the Cygwin port of Bash. Note that any version of make
  that is compiled with Cygwin will only work with Cygwin tools, due to
  the use of cygwin style paths. This means Cygwin make is unsuitable
  for building parts of Emacs that need to invoke Emacs itself (leim and
  "make bootstrap", for example). Also see the Trouble-shooting section
  below if you decide to go ahead and use Cygwin make.
 
                                         sh exists     no sh

    cygwin b20.1 make (3.75):            fails[1, 5]   fails[2, 5]
    MSVC compiled gmake 3.77:            okay          okay
    MSVC compiled gmake 3.78.1:          okay          okay
    MSVC compiled gmake 3.79.1:          okay          okay
    mingw32/gcc-2.92.2 make (3.77):      okay          okay[4]
    cygwin compiled gmake 3.77:          fails[1, 5]   fails[2, 5]
    cygwin compiled make 3.78.1:         fails[5]      fails[2, 5]
    cygwin compiled make 3.79.1:         fails[3, 5]   fails[2?, 5]
    mingw32 compiled make 3.79.1:        okay          okay 

  Notes:

    [1] doesn't cope with makefiles with DOS line endings, so must mount
        emacs source with text!=binary.
    [2] fails when needs to invoke shell commands; okay invoking gcc etc.
    [3] requires LC_MESSAGES support to build; cannot build with early
        versions of cygwin.
    [4] may fail on Windows 9X and Windows ME; if so, install Bash.
    [5] fails when building leim due to the use of cygwin style paths.
        May work if building emacs without leim.

* Configuring

  Configuration of Emacs is now handled by running configure.bat in the
  nt subdirectory.  It will detect which compiler you have available,
  and generate makefiles accordingly.  You can override the compiler
  detection, and control optimization and debug settings, by specifying
  options on the command line when invoking configure.

  To configure Emacs to build with GCC or MSVC, whichever is available,
  simply change to the nt subdirectory and run `configure' with no
  options.  To see what options are available, run `configure --help'.

  N.B.  It is normal to see a few error messages output while configure
  is running, when gcc support is being tested.  These cannot be
  surpressed because of limitations in the Windows 9x command.com shell.

* Building

  After running configure, simply run the appropriate `make' program for
  your compiler to build Emacs.  For MSVC, this is nmake; for GCC, it is
  GNU make.

  As the files are compiled, you will see some warning messages
  declaring that some functions don't return a value, or that some data
  conversions will be lossy, etc.  You can safely ignore these messages.
  The warnings may be fixed in the main FSF source at some point, but
  until then we will just live with them.

* Installing

  To install Emacs after it has compiled, simply run `nmake install'
  or `make install', depending on which version of the Make utility
  do you have.

  By default, Emacs will be installed in the location where it was
  built, but a different location can be specified either using the
  --prefix option to configure, or by setting INSTALL_DIR when running
  make, like so:

     make install INSTALL_DIR=D:/emacs

  (for `nmake', type "nmake install INSTALL_DIR=D:/emacs" instead).

  The install process will run addpm to setup the registry entries, and
  to create a Start menu icon for Emacs.

* Trouble-shooting

  The main problems that are likely to be encountered when building
  Emacs stem from using an old version of GCC, or old Mingw or W32 API
  headers.  Additionally, cygwin ports of GNU make may require the Emacs
  source tree to be mounted with text!=binary, because the makefiles
  generated by configure.bat necessarily use DOS line endings.  Also,
  cygwin ports of make must run in UNIX mode, either by specifying
  --unix on the command line, or MAKE_MODE=UNIX in the environment.

  When configure runs, it attempts to detect when GCC itself, or the
  headers it is using, are not suitable for building Emacs.  GCC version
  2.95 or later is needed, because that is when the Windows port gained
  sufficient support for anonymous structs and unions to cope with some
  definitions from winnt.h that are used by addsection.c.  The W32 API
  headers that come with Cygwin b20.1 are incomplete, and do not include
  some definitions required by addsection.c, for instance.  Also, older
  releases of the W32 API headers from Anders Norlander contain a typo
  in the definition of IMAGE_FIRST_SECTION in winnt.h, which
  addsection.c relies on.  Versions of w32api-xxx.zip from at least
  1999-11-18 onwards are okay.

  If configure succeeds, but make fails, install the Cygwin port of
  Bash, even if the table above indicates that Emacs should be able to
  build without sh.exe.  (Some versions of Windows shells are too dumb
  for Makefile's used by Emacs.)

  If you are using certain Cygwin builds of GCC, such as Cygwin version
  1.1.8, you may need to specify some extra compiler flags like so:

    configure --with-gcc --cflags -mwin32 --cflags -D__MSVCRT__
      --ldflags -mwin32

  However, the latest Cygwin versions, such as 1.3.3, don't need those
  switches; you can simply use "configure --with-gcc".

  We will attempt to auto-detect the need for these flags in a future
  release.

* Debugging

  You should be able to debug Emacs using the debugger that is
  appropriate for the compiler you used, namely DevStudio or Windbg if
  compiled with MSVC, or gdb if compiled with gcc.

  Emacs functions implemented in C use a naming convention that reflects
  their names in lisp.  The names of the C routines are the lisp names
  prefixed with 'F', and with dashes converted to underscores.  For
  example, the function call-process is implemented in C by
  Fcall_process.  Similarly, lisp variables are prefixed with 'V', again
  with dashes converted to underscores.  These conventions enable you to
  easily set breakpoints or examine familiar lisp variables by name.

  Since Emacs data is often in the form of a lisp object, and the
  Lisp_Object type is difficult to examine manually in the MSVC
  debugger, Emacs provides a helper routine called debug_print that
  prints out a readable representation of a Lisp_Object.  (If you are
  using gdb, there is a .gdbinit file in the src directory which
  provides definitions that are useful for examining lisp objects.  The
  following tips are mainly of interest when using MSVC.)  The output
  from debug_print is sent to stderr, and to the debugger via the
  OutputDebugString routine.  The output sent to stderr should be
  displayed in the console window that was opened when the emacs.exe
  executable was started.  The output sent to the debugger should be
  displayed in its "Debug" output window.

  When you are in the process of debugging Emacs and you would like to
  examine the contents of a Lisp_Object variable, popup the QuickWatch
  window (QuickWatch has an eyeglass symbol on its button in the
  toolbar).  In the text field at the top of the window, enter
  debug_print(<variable>) and hit return.  For example, start and run
  Emacs in the debugger until it is waiting for user input.  Then click
  on the Break button in the debugger to halt execution.  Emacs should
  halt in ZwUserGetMessage waiting for an input event.  Use the Call
  Stack window to select the procedure w32_msp_pump up the call stack
  (see below for why you have to do this).  Open the QuickWatch window
  and enter debug_print(Vexec_path).  Evaluating this expression will
  then print out the contents of the lisp variable exec-path.

  If QuickWatch reports that the symbol is unknown, then check the call
  stack in the Call Stack window.  If the selected frame in the call
  stack is not an Emacs procedure, then the debugger won't recognize
  Emacs symbols.  Instead, select a frame that is inside an Emacs
  procedure and try using debug_print again.

  If QuickWatch invokes debug_print but nothing happens, then check the
  thread that is selected in the debugger.  If the selected thread is
  not the last thread to run (the "current" thread), then it cannot be
  used to execute debug_print.  Use the Debug menu to select the current
  thread and try using debug_print again.  Note that the debugger halts
  execution (e.g., due to a breakpoint) in the context of the current
  thread, so this should only be a problem if you've explicitly switched
  threads.

COPYING PERMISSIONS

  Permission is granted to anyone to make or distribute verbatim copies
  of this document as received, in any medium, provided that the
  copyright notice and permission notice are preserved,
  and that the distributor grants the recipient permission
  for further redistribution as permitted by this notice.

  Permission is granted to distribute modified versions
  of this document, or of portions of it,
  under the above conditions, provided also that they
  carry prominent notices stating who last changed them,
  and that any new or changed statements about the activities
  of the Free Software Foundation are approved by the Foundation.
