This is ../info/ebrowse, produced by makeinfo version 4.2 from
ebrowse.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Ebrowse: (ebrowse).   A C++ class browser for Emacs.
END-INFO-DIR-ENTRY

   This file documents Ebrowse, a C++ class browser for GNU Emacs.

   Copyright (C) 2000 Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being "A GNU Manual,"
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled "GNU Free Documentation License" in
the Emacs manual.

   (a) The FSF's Back-Cover Text is: "You have freedom to copy and
modify this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development."

   This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.


File: ebrowse,  Node: Top,  Next: Overview,  Prev: (dir),  Up: (dir)

   You can browse C++ class hierarchies from within Emacs by using
Ebrowse.

* Menu:

* Overview::			What is it and now does it work?
* Generating browser files::	How to process C++ source files
* Loading a Tree::		How to start browsing
* Tree Buffers::		Traversing class hierarchies
* Member Buffers::		Looking at member information
* Tags-like Functions::		Finding members from source files
* Concept Index::		An entry for each concept defined


File: ebrowse,  Node: Overview,  Next: Generating browser files,  Prev: Top,  Up: Top

Introduction
************

   When working in software projects using C++, I frequently missed
software support for two things:

   * When you get a new class library, or you have to work on source
     code you haven't written yourself (or written sufficiently long
     ago), you need a tool to let you navigate class hierarchies and
     investigate features of the software.  Without such a tool you
     often end up `grep'ing through dozens or even hundreds of files.

   * Once you are productive, it would be nice to have a tool that
     knows your sources and can help you while you are editing source
     code.  Imagine to be able to jump to the definition of an
     identifier while you are editing, or something that can complete
     long identifier names because it knows what identifiers are
     defined in your program....

   The design of Ebrowse reflects these two needs.

   How does it work?

   A fast parser written in C is used to process C++ source files.  The
parser generates a data base containing information about classes,
members, global functions, defines, types etc. found in the sources.

   The second part of Ebrowse is a Lisp program.  This program reads
the data base generated by the parser.  It displays its contents in
various forms and allows you to perform operations on it, or do
something with the help of the knowledge contained in the data base.

   "Navigational" use of Ebrowse is centered around two types of
buffers which define their own major modes:

   "Tree buffers" are used to view class hierarchies in tree form.
They allow you to quickly find classes, find or view class declarations,
perform operations like query replace on sets of your source files, and
finally tree buffers are used to produce the second buffer form--member
buffers.  *Note Tree Buffers::.

   Members are displayed in "member buffers".  Ebrowse distinguishes
between six different types of members; each type is displayed as a
member list of its own:

   * Instance member variables;

   * Instance member functions;

   * Static member variables;

   * Static member functions;

   * Friends/Defines.  The list of defines is contained in the friends
     list of the pseudo-class `*Globals*';

   * Types (`enum's, and `typedef's defined with class scope).

   You can switch member buffers from one list to another, or to another
class.  You can include inherited members in the display, you can set
filters that remove categories of members from the display, and most
importantly you can find or view member declarations and definitions
with a keystroke.  *Note Member Buffers::.

   These two buffer types and the commands they provide support the
navigational use of the browser.  The second form resembles Emacs' Tags
package for C and other procedural languages.  Ebrowse's commands of
this type are not confined to special buffers; they are most often used
while you are editing your source code.

   To list just a subset of what you can use the Tags part of Ebrowse
for:

   * Jump to the definition or declaration of an identifier in your
     source code, with an electric position stack that lets you easily
     navigate back and forth.

   * Complete identifiers in your source with a completion list
     containing identifiers from your source code only.

   * Perform search and query replace operations over some or all of
     your source files.

   * Show all identifiers matching a regular expression--and jump to
     one of them, if you like.


File: ebrowse,  Node: Generating browser files,  Next: Loading a Tree,  Prev: Overview,  Up: Top

Processing Source Files
***********************

   Before you can start browsing a class hierarchy, you must run the
parser `ebrowse' on your source files in order to generate a Lisp data
base describing your program.

   The operation of `ebrowse' can be tailored with command line
options.  Under normal circumstances it suffices to let the parser use
its default settings.  If you want to do that, call it with a command
line like:

     ebrowse *.h *.cc

or, if your shell doesn't allow all the file names to be specified on
the command line,

     ebrowse --files=FILE

where FILE contains the names of the files to be parsed, one per line.

   When invoked with option `--help', `ebrowse' prints a list of
available command line options.

* Menu:

* Input files::		Specifying which files to parse
* Output file::		Changing the output file name
* Structs and unions::	Omitting `struct's and `union's
* Matching::		Setting regular expression lengths
* Verbosity::           Getting feedback for lengthy operations


File: ebrowse,  Node: Input files,  Next: Output file,  Prev: Generating browser files,  Up: Generating browser files

Specifying Input Files
======================

`file'
     Each file name on the command line tells `ebrowse' to parse that
     file.

`--files=FILE'
     This command line switch specifies that FILE contains a list of
     file names to parse.  Each line in FILE must contain one file
     name.  More than one option of this kind is allowed.  You might,
     for instance, want to use one file for header files, and another
     for source files.

`standard input'
     When `ebrowse' finds no file names on the command line, and no
     `--file' option is specified, it reads file names from standard
     input.  This is sometimes convenient when `ebrowse' is used as part
     of a command pipe.

`--search-path=PATHS'
     This option lets you specify search paths for your input files.
     PATHS is a list of directory names, separated from each other by a
     either a colon or a semicolon, depending on the operating system.

   It is generally a good idea to specify input files so that header
files are parsed before source files.  This facilitates the parser's
work of properly identifying friend functions of a class.


File: ebrowse,  Node: Output file,  Next: Structs and unions,  Prev: Input files,  Up: Generating browser files

Changing the Output File Name
=============================

`--output-file=FILE'
     This option instructs `ebrowse' to generate a Lisp data base with
     name FILE.  By default, the data base is named `BROWSE', and is
     written in the directory in which `ebrowse' is invoked.

     If you regularly use data base names different from the default,
     you might want to add this to your init file:

          (add-to-list 'auto-mode-alist '(NAME . ebrowse-tree-mode))

     where NAME is the Lisp data base name you are using.

`--append'
     By default, each run of `ebrowse' erases the old contents of the
     output file when writing to it.  You can instruct `ebrowse' to
     append its output to an existing file produced by `ebrowse' with
     this command line option.


File: ebrowse,  Node: Structs and unions,  Next: Matching,  Prev: Output file,  Up: Generating browser files

Structs and Unions
==================

`--no-structs-or-unions'
     This switch suppresses all classes in the data base declared as
     `struct' or `union' in the output.

     This is mainly useful when you are converting an existing C
     program to C++, and do not want to see the old C structs in a class
     tree.


File: ebrowse,  Node: Matching,  Next: Verbosity,  Prev: Structs and unions,  Up: Generating browser files

Regular Expressions
===================

   The parser `ebrowse' normally writes regular expressions to its
output file that help the Lisp part of Ebrowse to find functions,
variables etc. in their source files.

   You can instruct `ebrowse' to omit these regular expressions by
calling it with the command line switch `--no-regexps'.

   When you do this, the Lisp part of Ebrowse tries to guess, from
member or class names, suitable regular expressions to locate that
class or member in source files.  This works fine in most cases, but the
automatic generation of regular expressions can be too weak if unusual
coding styles are used.

`--no-regexps'
     This option turns off regular expression recording.

`--min-regexp-length=N'
     The number N following this option specifies the minimum length of
     the regular expressions recorded to match class and member
     declarations and definitions.  The default value is set at
     compilation time of `ebrowse'.

     The smaller the minimum length, the higher the probability that
     Ebrowse will find a wrong match.  The larger the value, the larger
     the output file and therefore the memory consumption once the file
     is read from Emacs.

`--max-regexp-length=N'
     The number following this option specifies the maximum length of
     the regular expressions used to match class and member
     declarations and definitions.  The default value is set at
     compilation time of `ebrowse'.

     The larger the maximum length, the higher the probability that the
     browser will find a correct match, but the larger the value the
     larger the output file and therefore the memory consumption once
     the data is read.  As a second effect, the larger the regular
     expression, the higher the probability that it will no longer
     match after editing the file.


File: ebrowse,  Node: Verbosity,  Prev: Matching,  Up: Generating browser files

Verbose Mode
============

`--verbose'
     When this option is specified on the command line, `ebrowse' prints
     a period for each file parsed, and it displays a `+' for each
     class written to the output file.

`--very-verbose'
     This option makes `ebrowse' print out the names of the files and
     the names of the classes seen.


File: ebrowse,  Node: Loading a Tree,  Next: Tree Buffers,  Prev: Generating browser files,  Up: Top

Starting to Browse
******************

   You start browsing a class hierarchy parsed by `ebrowse' by just
finding the `BROWSE' file with `C-x C-f'.

   An example of a tree buffer display is shown below.

     |  Collection
     |    IndexedCollection
     |      Array
     |        FixedArray
     |    Set
     |    Dictionary

   When you run Emacs on a display which supports colors and the mouse,
you will notice that certain areas in the tree buffer are highlighted
when you move the mouse over them.  This highlight marks mouse-sensitive
regions in the buffer.  Please notice the help strings in the echo area
when the mouse moves over a sensitive region.

   A click with `Mouse-3' on a mouse-sensitive region opens a context
menu.  In addition to this, each buffer also has a buffer-specific menu
that is opened with a click with `Mouse-3' somewhere in the buffer
where no highlight is displayed.


File: ebrowse,  Node: Tree Buffers,  Next: Member Buffers,  Prev: Loading a Tree,  Up: Top

Tree Buffers
************

   Class trees are displayed in "tree buffers" which install their own
major mode.  Most Emacs keys work in tree buffers in the usual way,
e.g. you can move around in the buffer with the usual `C-f', `C-v'
etc., or you can search with `C-s'.

   Tree-specific commands are bound to simple keystrokes, similar to
`Gnus'.  You can take a look at the key bindings by entering `?' which
calls `M-x describe-mode' in both tree and member buffers.

* Menu:

* Source Display::		Viewing and finding a class declaration
* Member Display::		Showing members, switching to member buffers
* Go to Class::			Finding a class
* Quitting::			Discarding and burying the tree buffer
* File Name Display::		Showing file names in the tree
* Expanding and Collapsing::	Expanding and collapsing branches
* Tree Indentation::		Changing the tree indentation
* Killing Classes::		Removing class from the tree
* Saving a Tree::		Saving a modified tree
* Statistics::			Displaying class tree statistics
* Marking Classes::		Marking and unmarking classes


File: ebrowse,  Node: Source Display,  Next: Member Display,  Prev: Tree Buffers,  Up: Tree Buffers

Viewing and Finding Class Declarations
======================================

   You can view or find a class declaration when the cursor is on a
class name.

`SPC'
     This command views the class declaration if the database contains
     informations about it.  If you don't parse the entire source you
     are working on, some classes will only be known to exist but the
     location of their declarations and definitions will not be known.

`RET'
     Works like `SPC', except that it finds the class declaration
     rather than viewing it, so that it is ready for editing.

   The same functionality is available from the menu opened with
`Mouse-3' on the class name.


File: ebrowse,  Node: Member Display,  Next: Go to Class,  Prev: Source Display,  Up: Tree Buffers

Displaying Members
==================

   Ebrowse distinguishes six different kinds of members, each of which
is displayed as a separate "member list": instance variables, instance
functions, static variables, static functions, friend functions, and
types.

   Each of these lists can be displayed in a member buffer with a
command starting with `L' when the cursor is on a class name.  By
default, there is only one member buffer named "*Members*" that is
reused each time you display a member list--this has proven to be more
practical than to clutter up the buffer list with dozens of member
buffers.

   If you want to display more than one member list at a time you can
"freeze" its member buffer. Freezing a member buffer prevents it from
being overwritten the next time you display a member list. You can
toggle this buffer status at any time.

   Every member list display command in the tree buffer can be used
with a prefix argument (`C-u').  Without a prefix argument, the command
will pop to a member buffer displaying the member list.  With prefix
argument, the member buffer will additionally be "frozen".

`L v'
     This command displays the list of instance member variables.

`L V'
     Display the list of static variables.

`L d'
     Display the list of friend functions.  This list is used for
     defines if you are viewing the class `*Globals*' which is a place
     holder for global symbols.

`L f'
     Display the list of member functions.

`L F'
     Display the list of static member functions.

`L t'
     Display a list of types.

   These lists are also available from the class' context menu invoked
with `Mouse-3' on the class name.


File: ebrowse,  Node: Go to Class,  Next: Quitting,  Prev: Member Display,  Up: Tree Buffers

Finding a Class
===============

`/'
     This command reads a class name from the minibuffer with
     completion and positions the cursor on the class in the class tree.

     If the branch of the class tree containing the class searched for
     is currently collapsed, the class itself and all its base classes
     are recursively made visible.  (See also *Note Expanding and
     Collapsing::.)

     This function is also available from the tree buffer's context
     menu.

`n'
     Repeat the last search done with `/'.  Each tree buffer has its own
     local copy of the regular expression last searched in it.


File: ebrowse,  Node: Quitting,  Next: File Name Display,  Prev: Go to Class,  Up: Tree Buffers

Burying a Tree Buffer
=====================

`q'
     Is a synonym for `M-x bury-buffer'.


File: ebrowse,  Node: File Name Display,  Next: Expanding and Collapsing,  Prev: Quitting,  Up: Tree Buffers

Displaying File Names
=====================

`T f'
     This command toggles the display of file names in a tree buffer.
     If file name display is switched on, the names of the files
     containing the class declaration are shown to the right of the
     class names.  If the file is not known, the string `unknown' is
     displayed.

     This command is also provided in the tree buffer's context menu.

`s'
     Display file names for the current line, or for the number of lines
     given by a prefix argument.

   Here is an example of a tree buffer with file names displayed.

     |  Collection		(unknown)
     |    IndexedCollection	(indexedcltn.h)
     |      Array		(array.h)
     |        FixedArray	(fixedarray.h)
     |    Set		(set.h)
     |    Dictionary		(dict.h)


File: ebrowse,  Node: Expanding and Collapsing,  Next: Tree Indentation,  Prev: File Name Display,  Up: Tree Buffers

Expanding and Collapsing a Tree
===============================

   You can expand and collapse parts of a tree to reduce the complexity
of large class hierarchies.  Expanding or collapsing branches of a tree
has no impact on the functionality of other commands, like `/'.  (See
also *Note Go to Class::.)

   Collapsed branches are indicated with an ellipsis following the class
name like in the example below.

     |  Collection
     |    IndexedCollection...
     |    Set
     |    Dictionary

`-'
     This command collapses the branch of the tree starting at the
     class the cursor is on.

`+'
     This command expands the branch of the tree starting at the class
     the cursor is on.  Both commands for collapsing and expanding
     branches are also available from the class' object menu.

`*'
     This command expands all collapsed branches in the tree.


File: ebrowse,  Node: Tree Indentation,  Next: Killing Classes,  Prev: Expanding and Collapsing,  Up: Tree Buffers

Changing the Tree Indentation
=============================

`T w'
     This command reads a new indentation width from the minibuffer and
     redisplays the tree buffer with the new indentation  It is also
     available from the tree buffer's context menu.


File: ebrowse,  Node: Killing Classes,  Next: Saving a Tree,  Prev: Tree Indentation,  Up: Tree Buffers

Removing Classes from the Tree
==============================

`C-k'
     This command removes the class the cursor is on and all its derived
     classes from the tree.  The user is asked for confirmation before
     the deletion is actually performed.


File: ebrowse,  Node: Saving a Tree,  Next: Statistics,  Prev: Killing Classes,  Up: Tree Buffers

Saving a Tree
=============

`C-x C-s'
     This command writes a class tree to the file from which it was
     read.  This is useful after classes have been deleted from a tree.

`C-x C-w'
     Writes the tree to a file whose name is read from the minibuffer.


File: ebrowse,  Node: Statistics,  Next: Marking Classes,  Prev: Saving a Tree,  Up: Tree Buffers

`x'
     Display statistics for the tree, like number of classes in it,
     number of member functions, etc.  This command can also be found
     in the buffer's context menu.


File: ebrowse,  Node: Marking Classes,  Prev: Statistics,  Up: Tree Buffers

   Classes can be marked for operations similar to the standard Emacs
commands `M-x tags-search' and `M-x tags-query-replace' (see also *Note
Tags-like Functions::.)

`M t'
     Toggle the mark of the line point is in or for as many lines as
     given by a prefix command.  This command can also be found in the
     class' context menu.

`M a'
     Unmark all classes.  With prefix argument `C-u', mark all classes
     in the tree. Since this command operates on the whole buffer, it
     can also be found in the buffer's object menu.

   Marked classes are displayed with an `>' in column one of the tree
display, like in the following example

     |> Collection
     |    IndexedCollection...
     |>   Set
     |    Dictionary


File: ebrowse,  Node: Member Buffers,  Next: Tags-like Functions,  Prev: Tree Buffers,  Up: Top

Member Buffers
**************

   "Member buffers" are used to operate on lists of members of a class.
Ebrowse distinguishes six kinds of lists:

   * Instance variables (normal member variables);

   * Instance functions (normal member functions);

   * Static variables;

   * Static member functions;

   * Friend functions;

   * Types (`enum's and `typedef's defined with class scope.  Nested
     classes will be shown in the class tree like normal classes.

   Like tree buffers, member buffers install their own major mode.  Also
like in tree buffers, menus are provided for certain areas in the
buffer: members, classes, and the buffer itself.

* Menu:

* Switching Member Lists::	Choosing which members to display
* Finding/Viewing::		Modifying source code
* Inherited Members::		Display of Inherited Members
* Searching Members::		Finding members in member buffer
* Switching to Tree::		Going back to the tree buffer
* Filters::			Selective member display
* Attributes::			Display of `virtual' etc.
* Long and Short Display::	Comprehensive and verbose display
* Regexp Display::		Showing matching regular expressions
* Switching Classes::		Displaying another class
* Killing/Burying::		Getting rid of the member buffer
* Column Width::		Display style
* Redisplay::			Redrawing the member list
* Getting Help::		How to get help for key bindings


File: ebrowse,  Node: Switching Member Lists,  Next: Finding/Viewing,  Prev: Member Buffers,  Up: Member Buffers

Switching Member Lists
======================

`L n'
     This command switches the member buffer display to the next member
     list.

`L p'
     This command switches the member buffer display to the previous
     member list.

`L f'
     Switch to the list of member functions.

`L F'
     Switch to the list of static member functions.

`L v'
     Switch to the list of member variables.

`L V'
     Switch to the list of static member variables.

`L d'
     Switch to the list of friends or defines.

`L t'
     Switch to the list of types.

   Both commands cycle through the member list.

   Most of the commands are also available from the member buffer's
context menu.


File: ebrowse,  Node: Finding/Viewing,  Next: Inherited Members,  Prev: Switching Member Lists,  Up: Member Buffers

Finding and Viewing Member Source
=================================

`RET'
     This command finds the definition of the member the cursor is on.
     Finding involves roughly the same as the standard Emacs tags
     facility does--loading the file and searching for a regular
     expression matching the member.

`f'
     This command finds the declaration of the member the cursor is on.

`SPC'
     This is the same command as `RET', but views the member definition
     instead of finding the member's source file.

`v'
     This is the same command as `f', but views the member's declaration
     instead of finding the file the declaration is in.

   You can install a hook function to perform actions after a member or
class declaration or definition has been found, or when it is not found.

   All the commands described above can also be found in the context
menu displayed when clicking `Mouse-2' on a member name.


File: ebrowse,  Node: Inherited Members,  Next: Searching Members,  Prev: Finding/Viewing,  Up: Member Buffers

Display of Inherited Members
============================

`D b'
     This command toggles the display of inherited members in the member
     buffer.  This is also in the buffer's context menu.


File: ebrowse,  Node: Searching Members,  Next: Switching to Tree,  Prev: Inherited Members,  Up: Member Buffers

Searching Members
=================

`G v'
     Position the cursor on a member whose name is read from the
     minibuffer; only members shown in the current member buffer appear
     in the completion list.

`G m'
     Like the above command, but all members for the current class
     appear in the completion list.  If necessary, the current member
     list is switched to the one containing the member.

     With a prefix argument (`C-u'), all members in the class tree,
     i.e. all members the browser knows about appear in the completion
     list.  The member display will be switched to the class and member
     list containing the member.

`G n'
     Repeat the last member search.

   Look into the buffer's context menu for a convenient way to do this
with a mouse.


File: ebrowse,  Node: Switching to Tree,  Next: Filters,  Prev: Searching Members,  Up: Member Buffers

Switching to Tree Buffer
========================

`TAB'
     Pop up the tree buffer to which the member buffer belongs.

`t'
     Do the same as `TAB' but also position the cursor on the class
     displayed in the member buffer.


File: ebrowse,  Node: Filters,  Next: Attributes,  Prev: Switching to Tree,  Up: Member Buffers

Filters
=======

`F a u'
     This command toggles the display of `public' members.  The `a'
     stands for `access'.

`F a o'
     This command toggles the display of `protected' members.

`F a i'
     This command toggles the display of `private' members.

`F v'
     This command toggles the display of `virtual' members.

`F i'
     This command toggles the display of `inline' members.

`F c'
     This command toggles the display of `const' members.

`F p'
     This command toggles the display of pure virtual members.

`F r'
     This command removes all filters.

   These commands are also found in the buffer's context menu.


File: ebrowse,  Node: Attributes,  Next: Long and Short Display,  Prev: Filters,  Up: Member Buffers

Displaying Member Attributes
============================

`D a'
     Toggle the display of member attributes (default is on).

     The nine member attributes Ebrowse knows about are displayed as a
     list a single-characters flags enclosed in angle brackets in front
     the of the member's name.  A `-' at a given position means that
     the attribute is false.  The list of attributes from left to right
     is

    `T'
          The member is a template.

    `C'
          The member is declared `extern "C"'.

    `v'
          Means the member is declared `virtual'.

    `i'
          The member is declared `inline'.

    `c'
          The member is `const'.

    `0'
          The member is a pure virtual function.

    `m'
          The member is declared `mutable'.

    `e'
          The member is declared `explicit'.

    `t'
          The member is a function with a throw list.

   This command is also in the buffer's context menu.


File: ebrowse,  Node: Long and Short Display,  Next: Regexp Display,  Prev: Attributes,  Up: Member Buffers

Long and Short Member Display
=============================

`D l'
     This command toggles the member buffer between short and long
     display form.  The short display form displays member names, only:

          | isEmpty        contains       hasMember      create
          | storeSize      hash           isEqual        restoreGuts
          | saveGuts

     The long display shows one member per line with member name and
     regular expressions matching the member (if known):

          | isEmpty               Bool isEmpty () const...
          | hash                  unsigned hash () const...
          | isEqual               int isEqual (...

     Regular expressions will only be displayed when the Lisp database
     has not been produced with the `ebrowse' option `--no-regexps'.
     *Note -no-regexps: Matching.


File: ebrowse,  Node: Regexp Display,  Next: Switching Classes,  Prev: Long and Short Display,  Up: Member Buffers

Display of Regular Expressions
==============================

`D r'
     This command toggles the long display form from displaying the
     regular expressions matching the member declarations to those
     expressions matching member definitions.

   Regular expressions will only be displayed when the Lisp database has
not been produced with the `ebrowse' option `--no-regexps', see *Note
-no-regexps: Matching.


File: ebrowse,  Node: Switching Classes,  Next: Killing/Burying,  Prev: Regexp Display,  Up: Member Buffers

Displaying Another Class
========================

`C c'
     This command lets you switch the member buffer to another class.
     It reads the name of the new class from the minibuffer with
     completion.

`C b'
     This is the same command as `C c' but restricts the classes shown
     in the completion list to immediate base classes, only.  If only
     one base class exists, this one is immediately shown in the
     minibuffer.

`C d'
     Same as `C b', but for derived classes.

`C p'
     Switch to the previous class in the class hierarchy on the same
     level as the class currently displayed.

`C n'
     Switch to the next sibling of the class in the class tree.


File: ebrowse,  Node: Killing/Burying,  Next: Column Width,  Prev: Switching Classes,  Up: Member Buffers

Burying a Member Buffer
=======================

`q'
     This command is a synonym for `M-x bury-buffer'.


File: ebrowse,  Node: Column Width,  Next: Redisplay,  Prev: Killing/Burying,  Up: Member Buffers

Setting the Column Width
========================

`D w'
     This command sets the column width depending on the display form
     used (long or short display).


File: ebrowse,  Node: Redisplay,  Next: Getting Help,  Prev: Column Width,  Up: Member Buffers

Forced Redisplay
================

`C-l'
     This command forces a redisplay of the member buffer.  If the width
     of the window displaying the member buffer is changed this command
     redraws the member list with the appropriate column widths and
     number of columns.


File: ebrowse,  Node: Getting Help,  Prev: Redisplay,  Up: Member Buffers

`?'
     This key is bound to `describe-mode'.


File: ebrowse,  Node: Tags-like Functions,  Next: Concept Index,  Prev: Member Buffers,  Up: Top

Tags-like Functions
*******************

   Ebrowse provides tags functions similar to those of the standard
Emacs Tags facility, but better suited to the needs of C++ programmers.

* Menu:

* Finding and Viewing::	Going to a member declaration/definition
* Position Stack::	Moving to previous locations
* Search & Replace::    Searching and replacing over class tree files
* Members in Files::    Listing all members in a given file
* Apropos::             Listing members matching a regular expression
* Symbol Completion::   Completing names while editing
* Member Buffer Display:: Quickly display a member buffer for some
                        identifier


File: ebrowse,  Node: Finding and Viewing,  Next: Position Stack,  Prev: Tags-like Functions,  Up: Tags-like Functions

Finding and Viewing Members
===========================

   The functions in this section are similar to those described in
*Note Source Display::, and also in *Note Finding/Viewing::, except that
they work in a C++ source buffer, not in member and tree buffers created
by Ebrowse.

`C-c b f'
     Find the definition of the member around point.  If you invoke this
     function with a prefix argument, the declaration is searched.

     If more than one class contains a member with the given name you
     can select the class with completion.  If there is a scope
     declaration in front of the member name, this class name is used
     as initial input for the completion.

`C-c b F'
     Find the declaration of the member around point.

`C-c b v'
     View the definition of the member around point.

`C-c b V'
     View the declaration of the member around point.

`C-c b 4 f'
     Find a member's definition in another window.

`C-c b 4 F'
     Find a member's declaration in another window.

`C-c b 4 v'
     View a member's definition in another window.

`C-c b 4 V'
     View a member's declaration in another window.

`C-c b 5 f'
     Find a member's definition in another frame.

`C-c b 5 F'
     Find a member's declaration in another frame.

`C-c b 5 v'
     View a member's definition in another frame.

`C-c b 5 V'
     View a member's declaration in another frame.


File: ebrowse,  Node: Position Stack,  Next: Search & Replace,  Prev: Finding and Viewing,  Up: Tags-like Functions

The Position Stack
==================

   When jumping to a member declaration or definition with one of
Ebrowse's commands, the position from where you performed the jump and
the position where you jumped to are recorded in a "position stack".
There are several ways in which you can quickly move to positions in
the stack:

`C-c b -'
     This command sets point to the previous position in the position
     stack.  Directly after you performed a jump, this will put you
     back to the position where you came from.

     The stack is not popped, i.e. you can always switch back and forth
     between positions in the stack.  To avoid letting the stack grow to
     infinite size there is a maximum number of positions defined.
     When this number is reached, older positions are discarded when
     new positions are pushed on the stack.

`C-c b +'
     This command moves forward in the position stack, setting point to
     the next position stored in the position stack.

`C-c b p'
     Displays an electric buffer showing all positions saved in the
     stack.  You can select a position by pressing `SPC' in a line.
     You can view a position with `v'.


File: ebrowse,  Node: Search & Replace,  Next: Members in Files,  Prev: Position Stack,  Up: Tags-like Functions

Searching and Replacing
=======================

   Ebrowse allows you to perform operations on all or a subset of the
files mentioned in a class tree.  When you invoke one of the following
functions and more than one class tree is loaded, you must choose a
class tree to use from an electric tree menu.  If the selected tree
contains marked classes, the following commands operate on the files
mentioned in the marked classes only.  Otherwise all files in the class
tree are used.

`C-c b s'
     This function performs a regular expression search in the chosen
     set of files.

`C-c b u'
     This command performs a search for calls of a given member which is
     selected in the usual way with completion.

`C-c b %'
     Perform a query replace over the set of files.

`C-c b ,'
     All three operations above stop when finding a match.  You can
     restart the operation with this command.

`C-c b n'
     This restarts the last tags operation with the next file in the
     list.


File: ebrowse,  Node: Members in Files,  Next: Apropos,  Prev: Search & Replace,  Up: Tags-like Functions

Members in Files
================

   The command `C-c b l', lists all members in a given file.  The file
name is read from the minibuffer with completion.


File: ebrowse,  Node: Apropos,  Next: Symbol Completion,  Prev: Members in Files,  Up: Tags-like Functions

Member Apropos
==============

   The command `C-c b a' can be used to display all members matching a
given regular expression.  This command can be very useful if you
remember only part of a member name, and not its beginning.

   A special buffer is popped up containing all identifiers matching the
regular expression, and what kind of symbol it is (e.g. a member
function, or a type).  You can then switch to this buffer, and use the
command `C-c b f', for example, to jump to a specific member.


File: ebrowse,  Node: Symbol Completion,  Next: Member Buffer Display,  Prev: Apropos,  Up: Tags-like Functions

Symbol Completion
=================

   The command `C-c b TAB' completes the symbol in front of point.


File: ebrowse,  Node: Member Buffer Display,  Prev: Symbol Completion,  Up: Tags-like Functions

Quick Member Display
====================

   You can quickly display a member buffer containing the member the
cursor in on with the command `C-c b m'.


File: ebrowse,  Node: Concept Index,  Prev: Tags-like Functions,  Up: Top

Concept Index
*************

* Menu:

* *Globals*:                             Member Display.
* *Members* buffer:                      Member Display.
* --append:                              Output file.
* --files:                               Input files.
* --help:                                Generating browser files.
* --max-regexp-length:                   Matching.
* --min-regexp-length:                   Matching.
* --no-regexps:                          Matching.
* --no-structs-or-unions:                Structs and unions.
* --output-file:                         Output file.
* --search-path:                         Input files.
* --verbose:                             Verbosity.
* --very-verbose:                        Verbosity.
* appending output to class data base:   Output file.
* apropos on class members:              Apropos.
* attributes:                            Attributes.
* base class, display:                   Switching Classes.
* base classes, members:                 Inherited Members.
* branches of class tree:                Expanding and Collapsing.
* BROWSE file:                           Output file.
* browsing:                              Loading a Tree.
* buffer switching:                      Switching to Tree.
* burying member buffers:                Killing/Burying.
* burying tree buffer:                   Quitting.
* class data base creation:              Generating browser files.
* class declaration:                     Source Display.
* class display:                         Switching Classes.
* class location:                        Go to Class.
* class members, types:                  Member Buffers.
* class statistics:                      Statistics.
* class tree, collapse or expand:        Expanding and Collapsing.
* class tree, save to a file:            Saving a Tree.
* class trees:                           Tree Buffers.
* class, remove from tree:               Killing Classes.
* collapse tree branch:                  Expanding and Collapsing.
* column width:                          Column Width.
* command line for ebrowse:              Generating browser files.
* completion:                            Symbol Completion.
* const attribute:                       Attributes.
* const members:                         Filters.
* context menu:                          Loading a Tree.
* declaration of a member, in member buffers: Finding/Viewing.
* defines:                               Switching Member Lists.
* definition of a member, in member buffers: Finding/Viewing.
* derived class, display:                Switching Classes.
* display form:                          Long and Short Display.
* ebrowse, the program:                  Generating browser files.
* expand tree branch:                    Expanding and Collapsing.
* expanding branches:                    Go to Class.
* explicit attribute:                    Attributes.
* extern "C" attribute:                  Attributes.
* file names in tree buffers:            File Name Display.
* file, members:                         Members in Files.
* files:                                 Members in Files.
* filters:                               Filters.
* finding a class:                       Source Display.
* finding class member, in C++ source:   Finding and Viewing.
* finding members, in member buffers:    Finding/Viewing.
* freezing a member buffer:              Member Display.
* friend functions:                      Input files.
* friend functions, list:                Member Display.
* friends:                               Switching Member Lists.
* header files:                          Input files.
* help:                                  Getting Help.
* indentation of the tree:               Tree Indentation.
* indentation, member:                   Column Width.
* inherited members:                     Inherited Members.
* inline:                                Attributes.
* inline members:                        Filters.
* input files, for ebrowse:              Input files.
* instance member variables, list:       Member Display.
* killing classes:                       Killing Classes.
* list class members in a file:          Members in Files.
* loading:                               Loading a Tree.
* locate class:                          Go to Class.
* long display:                          Long and Short Display.
* major modes, of Ebrowse buffers:       Overview.
* marking classes:                       Marking Classes.
* maximum regexp length for recording:   Matching.
* member attribute display:              Attributes.
* member buffer:                         Overview.
* member buffer mode:                    Member Buffers.
* member buffer, for member at point:    Member Buffer Display.
* member declaration, finding, in C++ source: Finding and Viewing.
* member declarations, in member buffers: Finding/Viewing.
* member definition, finding, in C++ source: Finding and Viewing.
* member definitions, in member buffers: Finding/Viewing.
* member functions, list:                Member Display.
* member indentation:                    Column Width.
* member lists, in member buffers:       Switching Member Lists.
* member lists, in tree buffers:         Member Display.
* members:                               Member Buffers.
* members in file, listing:              Members in Files.
* members, matching regexp:              Apropos.
* minimum regexp length for recording:   Matching.
* mouse highlight in tree buffers:       Loading a Tree.
* mutable attribute:                     Attributes.
* next member list:                      Switching Member Lists.
* operations on marked classes:          Marking Classes.
* output file name:                      Output file.
* parser for C++ sources:                Overview.
* position stack:                        Position Stack.
* previous member list:                  Switching Member Lists.
* private members:                       Filters.
* protected members:                     Filters.
* public members:                        Filters.
* pure virtual function attribute:       Attributes.
* pure virtual members:                  Filters.
* redisplay of member buffers:           Redisplay.
* regular expression display:            Regexp Display.
* regular expressions, recording:        Matching.
* remove filters:                        Filters.
* replacing in multiple C++ files:       Search & Replace.
* response files:                        Input files.
* restart tags-operation:                Search & Replace.
* return to original position:           Position Stack.
* save tree to a file:                   Saving a Tree.
* search for class:                      Go to Class.
* searching members:                     Searching Members.
* searching multiple C++ files:          Search & Replace.
* short display:                         Long and Short Display.
* standard input, specifying input files: Input files.
* static:                                Switching Member Lists.
* static member functions, list:         Member Display.
* static members:                        Switching Member Lists.
* static variables, list:                Member Display.
* statistics for a tree:                 Statistics.
* structs:                               Structs and unions.
* subclass, display:                     Switching Classes.
* superclass, display:                   Switching Classes.
* superclasses, members:                 Inherited Members.
* switching buffers:                     Switching to Tree.
* symbol completion:                     Symbol Completion.
* tags:                                  Finding and Viewing.
* template attribute:                    Attributes.
* toggle mark:                           Marking Classes.
* tree buffer:                           Overview.
* tree buffer mode:                      Tree Buffers.
* tree buffer, switch to:                Switching to Tree.
* tree indentation:                      Tree Indentation.
* tree statistics:                       Statistics.
* tree, save to a file:                  Saving a Tree.
* types:                                 Switching Member Lists.
* types of class members:                Member Buffers.
* types, list:                           Member Display.
* unions:                                Structs and unions.
* unmark all:                            Marking Classes.
* verbose operation:                     Verbosity.
* viewing class member, in C++ source:   Finding and Viewing.
* viewing members, in member buffers:    Finding/Viewing.
* viewing, class:                        Source Display.
* virtual attribute:                     Attributes.
* virtual members:                       Filters.



Tag Table:
Node: Top1230
Node: Overview1749
Node: Generating browser files5341
Node: Input files6461
Node: Output file7717
Node: Structs and unions8618
Node: Matching9054
Node: Verbosity11013
Node: Loading a Tree11439
Node: Tree Buffers12452
Node: Source Display13601
Node: Member Display14383
Node: Go to Class16155
Node: Quitting16874
Node: File Name Display17064
Node: Expanding and Collapsing17963
Node: Tree Indentation18955
Node: Killing Classes19334
Node: Saving a Tree19696
Node: Statistics20059
Node: Marking Classes20338
Node: Member Buffers21153
Node: Switching Member Lists22608
Node: Finding/Viewing23404
Node: Inherited Members24451
Node: Searching Members24761
Node: Switching to Tree25661
Node: Filters25999
Node: Attributes26736
Node: Long and Short Display27798
Node: Regexp Display28744
Node: Switching Classes29280
Node: Killing/Burying30075
Node: Column Width30292
Node: Redisplay30556
Node: Getting Help30933
Node: Tags-like Functions31058
Node: Finding and Viewing31820
Node: Position Stack33329
Node: Search & Replace34618
Node: Members in Files35728
Node: Apropos35994
Node: Symbol Completion36605
Node: Member Buffer Display36825
Node: Concept Index37078

End Tag Table
