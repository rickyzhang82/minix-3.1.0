This is ../info/gnus, produced by makeinfo version 4.3 from gnus.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus: (gnus).         The newsreader Gnus.
END-INFO-DIR-ENTRY

   This file documents Gnus, the GNU Emacs newsreader.

   Copyright (C) 1995,96,97,98,99,2000,2001 Free Software Foundation,
Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being none, with the Front-Cover texts being "A GNU
Manual", and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License" in the Emacs manual.

   (a) The FSF's Back-Cover Text is: "You have freedom to copy and
modify this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development."

   This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.


File: gnus,  Node: Top,  Next: Starting Up,  Up: (dir)

The Gnus Newsreader
*******************

   You can read news (and mail) from within Emacs by using Gnus.  The
news can be gotten by any nefarious means you can think of--NNTP, local
spool or your mbox file.  All at the same time, if you want to push your
luck.

   This manual corresponds to Gnus 5.9.0.

* Menu:

* Starting Up::           Finding news can be a pain.
* The Group Buffer::      Selecting, subscribing and killing groups.
* The Summary Buffer::    Reading, saving and posting articles.
* The Article Buffer::    Displaying and handling articles.
* Composing Messages::    Information on sending mail and news.
* Select Methods::        Gnus reads all messages from various select methods.
* Scoring::               Assigning values to articles.
* Various::               General purpose settings.
* The End::               Farewell and goodbye.
* Appendices::            Terminology, Emacs intro, FAQ, History, Internals.
* Index::                 Variable, function and concept index.
* Key Index::             Key Index.

 --- The Detailed Node Listing ---

Starting Gnus

* Finding the News::    Choosing a method for getting news.
* The First Time::      What does Gnus do the first time you start it?
* The Server is Down::  How can I read my mail then?
* Slave Gnusae::        You can have more than one Gnus active at a time.
* Fetching a Group::    Starting Gnus just to read a group.
* New Groups::          What is Gnus supposed to do with new groups?
* Startup Files::       Those pesky startup files---`.newsrc'.
* Auto Save::           Recovering from a crash.
* The Active File::     Reading the active file over a slow line Takes Time.
* Changing Servers::    You may want to move from one server to another.
* Startup Variables::   Other variables you might change.

New Groups

* Checking New Groups::      Determining what groups are new.
* Subscription Methods::     What Gnus should do with new groups.
* Filtering New Groups::     Making Gnus ignore certain new groups.

The Group Buffer

* Group Buffer Format::    Information listed and how you can change it.
* Group Maneuvering::      Commands for moving in the group buffer.
* Selecting a Group::      Actually reading news.
* Group Data::             Changing the info for a group.
* Subscription Commands::  Unsubscribing, killing, subscribing.
* Group Levels::           Levels? What are those, then?
* Group Score::            A mechanism for finding out what groups you like.
* Marking Groups::         You can mark groups for later processing.
* Foreign Groups::         Creating and editing groups.
* Group Parameters::       Each group may have different parameters set.
* Listing Groups::         Gnus can list various subsets of the groups.
* Sorting Groups::         Re-arrange the group order.
* Group Maintenance::      Maintaining a tidy `.newsrc' file.
* Browse Foreign Server::  You can browse a server.  See what it has to offer.
* Exiting Gnus::           Stop reading news and get some work done.
* Group Topics::           A folding group mode divided into topics.
* Misc Group Stuff::       Other stuff that you can to do.

Group Buffer Format

* Group Line Specification::       Deciding how the group buffer is to look.
* Group Modeline Specification::   The group buffer modeline.
* Group Highlighting::             Having nice colors in the group buffer.

Group Topics

* Topic Variables::    How to customize the topics the Lisp Way.
* Topic Commands::     Interactive E-Z commands.
* Topic Sorting::      Sorting each topic individually.
* Topic Topology::     A map of the world.
* Topic Parameters::   Parameters that apply to all groups in a topic.

Misc Group Stuff

* Scanning New Messages:: Asking Gnus to see whether new messages have arrived.
* Group Information::     Information and help on groups and Gnus.
* Group Timestamp::       Making Gnus keep track of when you last read a group.
* File Commands::         Reading and writing the Gnus files.

The Summary Buffer

* Summary Buffer Format::       Deciding how the summary buffer is to look.
* Summary Maneuvering::         Moving around the summary buffer.
* Choosing Articles::           Reading articles.
* Paging the Article::          Scrolling the current article.
* Reply Followup and Post::     Posting articles.
* Marking Articles::            Marking articles as read, expirable, etc.
* Limiting::                    You can limit the summary buffer.
* Threading::                   How threads are made.
* Sorting::                     How articles and threads are sorted.
* Asynchronous Fetching::       Gnus might be able to pre-fetch articles.
* Article Caching::             You may store articles in a cache.
* Persistent Articles::         Making articles expiry-resistant.
* Article Backlog::             Having already read articles hang around.
* Saving Articles::             Ways of customizing article saving.
* Decoding Articles::           Gnus can treat series of (uu)encoded articles.
* Article Treatment::           The article buffer can be mangled at will.
* MIME Commands::               Doing MIMEy things with the articles.
* Charsets::                    Character set issues.
* Article Commands::            Doing various things with the article buffer.
* Summary Sorting::             Sorting the summary buffer in various ways.
* Finding the Parent::          No child support? Get the parent.
* Alternative Approaches::      Reading using non-default summaries.
* Tree Display::                A more visual display of threads.
* Mail Group Commands::         Some commands can only be used in mail groups.
* Various Summary Stuff::       What didn't fit anywhere else.
* Exiting the Summary Buffer::  Returning to the Group buffer.
* Crosspost Handling::          How crossposted articles are dealt with.
* Duplicate Suppression::       An alternative when crosspost handling fails.

Summary Buffer Format

* Summary Buffer Lines::     You can specify how summary lines should look.
* To From Newsgroups::       How to not display your own name.
* Summary Buffer Mode Line:: You can say how the mode line should look.
* Summary Highlighting::     Making the summary buffer all pretty and nice.

Choosing Articles

* Choosing Commands::        Commands for choosing articles.
* Choosing Variables::       Variables that influence these commands.

Reply, Followup and Post

* Summary Mail Commands::    Sending mail.
* Summary Post Commands::    Sending news.
* Summary Message Commands:: Other Message-related commands.
* Canceling and Superseding:: ``Whoops, I shouldn't have called him that.''

Marking Articles

* Unread Articles::          Marks for unread articles.
* Read Articles::            Marks for read articles.
* Other Marks::              Marks that do not affect readedness.
* Setting Marks::            How to set and remove marks.
* Generic Marking Commands:: How to customize the marking.
* Setting Process Marks::    How to mark articles for later processing.

Threading

* Customizing Threading::    Variables you can change to affect the threading.
* Thread Commands::          Thread based commands in the summary buffer.

Customizing Threading

* Loose Threads::        How Gnus gathers loose threads into bigger threads.
* Filling In Threads::   Making the threads displayed look fuller.
* More Threading::       Even more variables for fiddling with threads.
* Low-Level Threading::  You thought it was over... but you were wrong!

Decoding Articles

* Uuencoded Articles::    Uudecode articles.
* Shell Archives::        Unshar articles.
* PostScript Files::      Split PostScript.
* Other Files::           Plain save and binhex.
* Decoding Variables::    Variables for a happy decoding.
* Viewing Files::         You want to look at the result of the decoding?

Decoding Variables

* Rule Variables::          Variables that say how a file is to be viewed.
* Other Decode Variables::  Other decode variables.
* Uuencoding and Posting::  Variables for customizing uuencoding.

Article Treatment

* Article Highlighting::    You want to make the article look like fruit salad.
* Article Fontisizing::     Making emphasized text look nice.
* Article Hiding::          You also want to make certain info go away.
* Article Washing::         Lots of way-neat functions to make life better.
* Article Buttons::         Click on URLs, Message-IDs, addresses and the like.
* Article Date::            Grumble, UT!
* Article Signature::       What is a signature?
* Article Miscellania::     Various other stuff.

Alternative Approaches

* Pick and Read::               First mark articles and then read them.
* Binary Groups::               Auto-decode all articles.

Various Summary Stuff

* Summary Group Information::         Information oriented commands.
* Searching for Articles::            Multiple article commands.
* Summary Generation Commands::       (Re)generating the summary buffer.
* Really Various Summary Commands::   Those pesky non-conformant commands.

The Article Buffer

* Hiding Headers::        Deciding what headers should be displayed.
* Using MIME::            Pushing articles through MIME before reading them.
* Customizing Articles::  Tailoring the look of the articles.
* Article Keymap::        Keystrokes available in the article buffer.
* Misc Article::          Other stuff.

Composing Messages

* Mail::                 Mailing and replying.
* Posting Server::       What server should you post via?
* Mail and Post::        Mailing and posting at the same time.
* Archived Messages::    Where Gnus stores the messages you've sent.
* Posting Styles::       An easier way to specify who you are.
* Drafts::               Postponing messages and rejected messages.
* Rejected Articles::    What happens if the server doesn't like your article?

Select Methods

* The Server Buffer::     Making and editing virtual servers.
* Getting News::          Reading USENET news with Gnus.
* Getting Mail::          Reading your personal mail with Gnus.
* Browsing the Web::      Getting messages from a plethora of Web sources.
* Other Sources::         Reading directories, files, SOUP packets.
* Combined Groups::       Combining groups into one group.
* Gnus Unplugged::        Reading news and mail offline.

The Server Buffer

* Server Buffer Format::      You can customize the look of this buffer.
* Server Commands::           Commands to manipulate servers.
* Example Methods::           Examples server specifications.
* Creating a Virtual Server:: An example session.
* Server Variables::          Which variables to set.
* Servers and Methods::       You can use server names as select methods.
* Unavailable Servers::       Some servers you try to contact may be down.

Getting News

* NNTP::               Reading news from an NNTP server.
* News Spool::         Reading news from the local spool.

Getting Mail

* Mail in a Newsreader::         Important introductory notes.
* Getting Started Reading Mail:: A simple cookbook example.
* Splitting Mail::               How to create mail groups.
* Mail Sources::                 How to tell Gnus where to get mail from.
* Mail Back End Variables::      Variables for customizing mail handling.
* Fancy Mail Splitting::         Gnus can do hairy splitting of incoming mail.
* Group Mail Splitting::         Use group customize to drive mail splitting.
* Incorporating Old Mail::       What about the old mail you have?
* Expiring Mail::                Getting rid of unwanted mail.
* Washing Mail::                 Removing cruft from the mail you get.
* Duplicates::                   Dealing with duplicated mail.
* Not Reading Mail::             Using mail back ends for reading other files.
* Choosing a Mail Back End::     Gnus can read a variety of mail formats.

Mail Sources

* Mail Source Specifiers::       How to specify what a mail source is.
* Mail Source Customization::    Some variables that influence things.
* Fetching Mail::                Using the mail source specifiers.

Choosing a Mail Back End

* Unix Mail Box::               Using the (quite) standard Un*x mbox.
* Rmail Babyl::                 Emacs programs use the rmail babyl format.
* Mail Spool::                  Store your mail in a private spool?
* MH Spool::                    An mhspool-like back end.
* Mail Folders::                Having one file for each group.
* Comparing Mail Back Ends::    An in-depth looks at pros and cons.

Browsing the Web

* Web Searches::          Creating groups from articles that match a string.
* Slashdot::              Reading the Slashdot comments.
* Ultimate::              The Ultimate Bulletin Board systems.
* Web Archive::           Reading mailing list archived on web.

Other Sources

* Directory Groups::      You can read a directory as if it was a newsgroup.
* Anything Groups::       Dired?  Who needs dired?
* Document Groups::       Single files can be the basis of a group.
* SOUP::                  Reading SOUP packets ``offline''.
* Mail-To-News Gateways:: Posting articles via mail-to-news gateways.
* IMAP::                  Using Gnus as a IMAP client.

Document Groups

* Document Server Internals::   How to add your own document types.

SOUP

* SOUP Commands::     Commands for creating and sending SOUP packets
* SOUP Groups::       A back end for reading SOUP packets.
* SOUP Replies::      How to enable `nnsoup' to take over mail and news.

IMAP

* Splitting in IMAP::     Splitting mail with nnimap.
* Editing IMAP ACLs::     Limiting/enabling other users access to a mailbox.
* Expunging mailboxes::   Equivalent of a "compress mailbox" button.

Combined Groups

* Virtual Groups::     Combining articles from many groups.
* Kibozed Groups::     Looking through parts of the newsfeed for articles.

Gnus Unplugged

* Agent Basics::           How it all is supposed to work.
* Agent Categories::       How to tell the Gnus Agent what to download.
* Agent Commands::         New commands for all the buffers.
* Agent Expiry::           How to make old articles go away.
* Agent and IMAP::         How to use the Agent with IMAP.
* Outgoing Messages::      What happens when you post/mail something?
* Agent Variables::        Customizing is fun.
* Example Setup::          An example `.gnus.el' file for offline people.
* Batching Agents::        How to fetch news from a `cron' job.
* Agent Caveats::          What you think it'll do and what it does.

Agent Categories

* Category Syntax::       What a category looks like.
* The Category Buffer::   A buffer for maintaining categories.
* Category Variables::    Customize'r'Us.

Agent Commands

* Group Agent Commands::
* Summary Agent Commands::
* Server Agent Commands::

Scoring

* Summary Score Commands::   Adding score entries for the current group.
* Group Score Commands::     General score commands.
* Score Variables::          Customize your scoring.  (My, what terminology).
* Score File Format::        What a score file may contain.
* Score File Editing::       You can edit score files by hand as well.
* Adaptive Scoring::         Big Sister Gnus knows what you read.
* Home Score File::          How to say where new score entries are to go.
* Followups To Yourself::    Having Gnus notice when people answer you.
* Scoring Tips::             How to score effectively.
* Reverse Scoring::          That problem child of old is not problem.
* Global Score Files::       Earth-spanning, ear-splitting score files.
* Kill Files::               They are still here, but they can be ignored.
* Converting Kill Files::    Translating kill files to score files.
* GroupLens::                Getting predictions on what you like to read.
* Advanced Scoring::         Using logical expressions to build score rules.
* Score Decays::             It can be useful to let scores wither away.

GroupLens

* Using GroupLens::          How to make Gnus use GroupLens.
* Rating Articles::          Letting GroupLens know how you rate articles.
* Displaying Predictions::   Displaying predictions given by GroupLens.
* GroupLens Variables::      Customizing GroupLens.

Advanced Scoring

* Advanced Scoring Syntax::     A definition.
* Advanced Scoring Examples::   What they look like.
* Advanced Scoring Tips::       Getting the most out of it.

Various

* Process/Prefix::             A convention used by many treatment commands.
* Interactive::                Making Gnus ask you many questions.
* Symbolic Prefixes::          How to supply some Gnus functions with options.
* Formatting Variables::       You can specify what buffers should look like.
* Windows Configuration::      Configuring the Gnus buffer windows.
* Faces and Fonts::            How to change how faces look.
* Compilation::                How to speed Gnus up.
* Mode Lines::                 Displaying information in the mode lines.
* Highlighting and Menus::     Making buffers look all nice and cozy.
* Buttons::                    Get tendinitis in ten easy steps!
* Daemons::                    Gnus can do things behind your back.
* NoCeM::                      How to avoid spam and other fatty foods.
* Undo::                       Some actions can be undone.
* Moderation::                 What to do if you're a moderator.
* XEmacs Enhancements::        There are more pictures and stuff under XEmacs.
* Fuzzy Matching::             What's the big fuzz?
* Thwarting Email Spam::       A how-to on avoiding unsolicited commercial email.
* Various Various::            Things that are really various.

Formatting Variables

* Formatting Basics::     A formatting variable is basically a format string.
* Mode Line Formatting::  Some rules about mode line formatting variables.
* Advanced Formatting::   Modifying output in various ways.
* User-Defined Specs::    Having Gnus call your own functions.
* Formatting Fonts::      Making the formatting look colorful and nice.

XEmacs Enhancements

* Picons::    How to display pictures of what your reading.
* Smileys::   Show all those happy faces the way they were meant to be shown.
* Toolbar::   Click'n'drool.
* XVarious::  Other XEmacsy Gnusey variables.

Picons

* Picon Basics::           What are picons and How do I get them.
* Picon Requirements::     Don't go further if you aren't using XEmacs.
* Easy Picons::            Displaying Picons---the easy way.
* Hard Picons::            The way you should do it.  You'll learn something.
* Picon Useless Configuration:: Other variables you can trash/tweak/munge/play with.

Appendices

* History::                        How Gnus got where it is today.
* On Writing Manuals::             Why this is not a beginner's guide.
* Terminology::                    We use really difficult, like, words here.
* Customization::                  Tailoring Gnus to your needs.
* Troubleshooting::                What you might try if things do not work.
* Gnus Reference Guide::           Rilly, rilly technical stuff.
* Emacs for Heathens::             A short introduction to Emacsian terms.
* Frequently Asked Questions::     A question-and-answer session.

History

* Gnus Versions::       What Gnus versions have been released.
* Other Gnus Versions:: Other Gnus versions that also have been released.
* Why?::                What's the point of Gnus?
* Compatibility::       Just how compatible is Gnus with GNUS?
* Conformity::          Gnus tries to conform to all standards.
* Emacsen::             Gnus can be run on a few modern Emacsen.
* Gnus Development::    How Gnus is developed.
* Contributors::        Oodles of people.
* New Features::        Pointers to some of the new stuff in Gnus.

New Features

* ding Gnus::          New things in Gnus 5.0/5.1, the first new Gnus.
* September Gnus::     The Thing Formally Known As Gnus 5.2/5.3.
* Red Gnus::           Third time best---Gnus 5.4/5.5.
* Quassia Gnus::       Two times two is four, or Gnus 5.6/5.7.
* Pterodactyl Gnus::   Pentad also starts with P, AKA Gnus 5.8/5.9.

Customization

* Slow/Expensive Connection:: You run a local Emacs and get the news elsewhere.
* Slow Terminal Connection::  You run a remote Emacs.
* Little Disk Space::         You feel that having large setup files is icky.
* Slow Machine::              You feel like buying a faster machine.

Gnus Reference Guide

* Gnus Utility Functions::   Common functions and variable to use.
* Back End Interface::       How Gnus communicates with the servers.
* Score File Syntax::        A BNF definition of the score file standard.
* Headers::                  How Gnus stores headers internally.
* Ranges::                   A handy format for storing mucho numbers.
* Group Info::               The group info format.
* Extended Interactive::     Symbolic prefixes and stuff.
* Emacs/XEmacs Code::        Gnus can be run under all modern Emacsen.
* Various File Formats::     Formats of files that Gnus use.

Back End Interface

* Required Back End Functions::       Functions that must be implemented.
* Optional Back End Functions::       Functions that need not be implemented.
* Error Messaging::                   How to get messages and report errors.
* Writing New Back Ends::             Extending old back ends.
* Hooking New Back Ends Into Gnus::   What has to be done on the Gnus end.
* Mail-like Back Ends::               Some tips on mail back ends.

Various File Formats

* Active File Format::      Information on articles and groups available.
* Newsgroups File Format::  Group descriptions.

Emacs for Heathens

* Keystrokes::      Entering text and executing commands.
* Emacs Lisp::      The built-in Emacs programming language.


File: gnus,  Node: Starting Up,  Next: The Group Buffer,  Prev: Top,  Up: Top

Starting Gnus
*************

   If your system administrator has set things up properly, starting
Gnus and reading news is extremely easy--you just type `M-x gnus' in
your Emacs.

   If you want to start Gnus in a different frame, you can use the
command `M-x gnus-other-frame' instead.

   If things do not go smoothly at startup, you have to twiddle some
variables in your `~/.gnus' file.  This file is similar to `~/.emacs',
but is read when gnus starts.

   If you puzzle at any terms used in this manual, please refer to the
terminology section (*note Terminology::).

* Menu:

* Finding the News::    Choosing a method for getting news.
* The First Time::      What does Gnus do the first time you start it?
* The Server is Down::  How can I read my mail then?
* Slave Gnusae::        You can have more than one Gnus active at a time.
* Fetching a Group::    Starting Gnus just to read a group.
* New Groups::          What is Gnus supposed to do with new groups?
* Startup Files::       Those pesky startup files---`.newsrc'.
* Auto Save::           Recovering from a crash.
* The Active File::     Reading the active file over a slow line Takes Time.
* Changing Servers::    You may want to move from one server to another.
* Startup Variables::   Other variables you might change.


File: gnus,  Node: Finding the News,  Next: The First Time,  Up: Starting Up

Finding the News
================

   The `gnus-select-method' variable says where Gnus should look for
news.  This variable should be a list where the first element says
"how" and the second element says "where".  This method is your native
method.  All groups not fetched with this method are foreign groups.

   For instance, if the `news.somewhere.edu' NNTP server is where you
want to get your daily dosage of news from, you'd say:

     (setq gnus-select-method '(nntp "news.somewhere.edu"))

   If you want to read directly from the local spool, say:

     (setq gnus-select-method '(nnspool ""))

   If you can use a local spool, you probably should, as it will almost
certainly be much faster.

   If this variable is not set, Gnus will take a look at the
`NNTPSERVER' environment variable.  If that variable isn't set, Gnus
will see whether `gnus-nntpserver-file' (`/etc/nntpserver' by default)
has any opinions on the matter.  If that fails as well, Gnus will try
to use the machine running Emacs as an NNTP server.  That's a long
shot, though.

   If `gnus-nntp-server' is set, this variable will override
`gnus-select-method'.  You should therefore set `gnus-nntp-server' to
`nil', which is what it is by default.

   You can also make Gnus prompt you interactively for the name of an
NNTP server.  If you give a non-numerical prefix to `gnus' (i.e., `C-u
M-x gnus'), Gnus will let you choose between the servers in the
`gnus-secondary-servers' list (if any).  You can also just type in the
name of any server you feel like visiting.  (Note that this will set
`gnus-nntp-server', which means that if you then `M-x gnus' later in
the same Emacs session, Gnus will contact the same server.)

   However, if you use one NNTP server regularly and are just
interested in a couple of groups from a different server, you would be
better served by using the `B' command in the group buffer.  It will
let you have a look at what groups are available, and you can subscribe
to any of the groups you want to.  This also makes `.newsrc'
maintenance much tidier.  *Note Foreign Groups::.

   A slightly different approach to foreign groups is to set the
`gnus-secondary-select-methods' variable.  The select methods listed in
this variable are in many ways just as native as the
`gnus-select-method' server.  They will also be queried for active
files during startup (if that's required), and new newsgroups that
appear on these servers will be subscribed (or not) just as native
groups are.

   For instance, if you use the `nnmbox' back end to read your mail,
you would typically set this variable to

     (setq gnus-secondary-select-methods '((nnmbox "")))


File: gnus,  Node: The First Time,  Next: The Server is Down,  Prev: Finding the News,  Up: Starting Up

The First Time
==============

   If no startup files exist, Gnus will try to determine what groups
should be subscribed by default.

   If the variable `gnus-default-subscribed-newsgroups' is set, Gnus
will subscribe you to just those groups in that list, leaving the rest
killed.  Your system administrator should have set this variable to
something useful.

   Since she hasn't, Gnus will just subscribe you to a few arbitrarily
picked groups (i.e., `*.newusers').  ("Arbitrary" is defined here as
"whatever Lars thinks you should read".)

   You'll also be subscribed to the Gnus documentation group, which
should help you with most common problems.

   If `gnus-default-subscribed-newsgroups' is `t', Gnus will just use
the normal functions for handling new groups, and not do anything
special.


File: gnus,  Node: The Server is Down,  Next: Slave Gnusae,  Prev: The First Time,  Up: Starting Up

The Server is Down
==================

   If the default server is down, Gnus will understandably have some
problems starting.  However, if you have some mail groups in addition to
the news groups, you may want to start Gnus anyway.

   Gnus, being the trusting sort of program, will ask whether to proceed
without a native select method if that server can't be contacted.  This
will happen whether the server doesn't actually exist (i.e., you have
given the wrong address) or the server has just momentarily taken ill
for some reason or other.  If you decide to continue and have no foreign
groups, you'll find it difficult to actually do anything in the group
buffer.  But, hey, that's your problem.  Blllrph!

   If you know that the server is definitely down, or you just want to
read your mail without bothering with the server at all, you can use the
`gnus-no-server' command to start Gnus.  That might come in handy if
you're in a hurry as well.  This command will not attempt to contact
your primary server--instead, it will just activate all groups on level
1 and 2.  (You should preferably keep no native groups on those two
levels.)


File: gnus,  Node: Slave Gnusae,  Next: Fetching a Group,  Prev: The Server is Down,  Up: Starting Up

Slave Gnusae
============

   You might want to run more than one Emacs with more than one Gnus at
the same time.  If you are using different `.newsrc' files (e.g., if you
are using the two different Gnusae to read from two different servers),
that is no problem whatsoever.  You just do it.

   The problem appears when you want to run two Gnusae that use the same
`.newsrc' file.

   To work around that problem some, we here at the Think-Tank at the
Gnus Towers have come up with a new concept: "Masters" and "slaves".
(We have applied for a patent on this concept, and have taken out a
copyright on those words.  If you wish to use those words in
conjunction with each other, you have to send $1 per usage instance to
me.  Usage of the patent ("Master/Slave Relationships In Computer
Applications") will be much more expensive, of course.)

   Anyway, you start one Gnus up the normal way with `M-x gnus' (or
however you do it).  Each subsequent slave Gnusae should be started with
`M-x gnus-slave'.  These slaves won't save normal `.newsrc' files, but
instead save "slave files" that contain information only on what groups
have been read in the slave session.  When a master Gnus starts, it
will read (and delete) these slave files, incorporating all information
from them.  (The slave files will be read in the sequence they were
created, so the latest changes will have precedence.)

   Information from the slave files has, of course, precedence over the
information in the normal (i.e., master) `.newsrc' file.


File: gnus,  Node: Fetching a Group,  Next: New Groups,  Prev: Slave Gnusae,  Up: Starting Up

Fetching a Group
================

   It is sometimes convenient to be able to just say "I want to read
this group and I don't care whether Gnus has been started or not".
This is perhaps more useful for people who write code than for users,
but the command `gnus-fetch-group' provides this functionality in any
case.  It takes the group name as a parameter.


File: gnus,  Node: New Groups,  Next: Startup Files,  Prev: Fetching a Group,  Up: Starting Up

New Groups
==========

   If you are satisfied that you really never want to see any new
groups, you can set `gnus-check-new-newsgroups' to `nil'.  This will
also save you some time at startup.  Even if this variable is `nil',
you can always subscribe to the new groups just by pressing `U' in the
group buffer (*note Group Maintenance::).  This variable is
`ask-server' by default.  If you set this variable to `always', then
Gnus will query the back ends for new groups even when you do the `g'
command (*note Scanning New Messages::).

* Menu:

* Checking New Groups::      Determining what groups are new.
* Subscription Methods::     What Gnus should do with new groups.
* Filtering New Groups::     Making Gnus ignore certain new groups.


File: gnus,  Node: Checking New Groups,  Next: Subscription Methods,  Up: New Groups

Checking New Groups
-------------------

   Gnus normally determines whether a group is new or not by comparing
the list of groups from the active file(s) with the lists of subscribed
and dead groups.  This isn't a particularly fast method.  If
`gnus-check-new-newsgroups' is `ask-server', Gnus will ask the server
for new groups since the last time.  This is both faster and cheaper.
This also means that you can get rid of the list of killed groups
altogether, so you may set `gnus-save-killed-list' to `nil', which will
save time both at startup, at exit, and all over.  Saves disk space,
too.  Why isn't this the default, then?  Unfortunately, not all servers
support this command.

   I bet I know what you're thinking now: How do I find out whether my
server supports `ask-server'?  No?  Good, because I don't have a
fail-safe answer.  I would suggest just setting this variable to
`ask-server' and see whether any new groups appear within the next few
days.  If any do, then it works.  If none do, then it doesn't work.  I
could write a function to make Gnus guess whether the server supports
`ask-server', but it would just be a guess.  So I won't.  You could
`telnet' to the server and say `HELP' and see whether it lists
`NEWGROUPS' among the commands it understands.  If it does, then it
might work.  (But there are servers that lists `NEWGROUPS' without
supporting the function properly.)

   This variable can also be a list of select methods.  If so, Gnus will
issue an `ask-server' command to each of the select methods, and
subscribe them (or not) using the normal methods.  This might be handy
if you are monitoring a few servers for new groups.  A side effect is
that startup will take much longer, so you can meditate while waiting.
Use the mantra "dingnusdingnusdingnus" to achieve permanent bliss.


File: gnus,  Node: Subscription Methods,  Next: Filtering New Groups,  Prev: Checking New Groups,  Up: New Groups

Subscription Methods
--------------------

   What Gnus does when it encounters a new group is determined by the
`gnus-subscribe-newsgroup-method' variable.

   This variable should contain a function.  This function will be
called with the name of the new group as the only parameter.

   Some handy pre-fab functions are:

`gnus-subscribe-zombies'
     Make all new groups zombies.  This is the default.  You can browse
     the zombies later (with `A z') and either kill them all off
     properly (with `S z'), or subscribe to them (with `u').

`gnus-subscribe-randomly'
     Subscribe all new groups in arbitrary order.  This really means
     that all new groups will be added at "the top" of the group buffer.

`gnus-subscribe-alphabetically'
     Subscribe all new groups in alphabetical order.

`gnus-subscribe-hierarchically'
     Subscribe all new groups hierarchically.  The difference between
     this function and `gnus-subscribe-alphabetically' is slight.
     `gnus-subscribe-alphabetically' will subscribe new groups in a
     strictly alphabetical fashion, while this function will enter
     groups into its hierarchy.  So if you want to have the `rec'
     hierarchy before the `comp' hierarchy, this function will not mess
     that configuration up.  Or something like that.

`gnus-subscribe-interactively'
     Subscribe new groups interactively.  This means that Gnus will ask
     you about *all* new groups.  The groups you choose to subscribe to
     will be subscribed hierarchically.

`gnus-subscribe-killed'
     Kill all new groups.

`gnus-subscribe-topics'
     Put the groups into the topic that has a matching `subscribe' topic
     parameter (*note Topic Parameters::).  For instance, a `subscribe'
     topic parameter that looks like

          "nnslashdot"

     will mean that all groups that match that regex will be subscribed
     under that topic.

     If no topics match the groups, the groups will be subscribed in the
     top-level topic.

   A closely related variable is
`gnus-subscribe-hierarchical-interactive'.  (That's quite a mouthful.)
If this variable is non-`nil', Gnus will ask you in a hierarchical
fashion whether to subscribe to new groups or not.  Gnus will ask you
for each sub-hierarchy whether you want to descend the hierarchy or not.

   One common mistake is to set the variable a few paragraphs above
(`gnus-subscribe-newsgroup-method') to
`gnus-subscribe-hierarchical-interactive'.  This is an error.  This
will not work.  This is ga-ga.  So don't do it.


File: gnus,  Node: Filtering New Groups,  Prev: Subscription Methods,  Up: New Groups

Filtering New Groups
--------------------

   A nice and portable way to control which new newsgroups should be
subscribed (or ignored) is to put an "options" line at the start of the
`.newsrc' file.  Here's an example:

     options -n !alt.all !rec.all sci.all

   This line obviously belongs to a serious-minded intellectual
scientific person (or she may just be plain old boring), because it
says that all groups that have names beginning with `alt' and `rec'
should be ignored, and all groups with names beginning with `sci' should
be subscribed.  Gnus will not use the normal subscription method for
subscribing these groups.  `gnus-subscribe-options-newsgroup-method' is
used instead.  This variable defaults to
`gnus-subscribe-alphabetically'.

   If you don't want to mess with your `.newsrc' file, you can just set
the two variables `gnus-options-subscribe' and
`gnus-options-not-subscribe'.  These two variables do exactly the same
as the `.newsrc' `options -n' trick.  Both are regexps, and if the new
group matches the former, it will be unconditionally subscribed, and if
it matches the latter, it will be ignored.

   Yet another variable that meddles here is
`gnus-auto-subscribed-groups'.  It works exactly like
`gnus-options-subscribe', and is therefore really superfluous, but I
thought it would be nice to have two of these.  This variable is more
meant for setting some ground rules, while the other variable is used
more for user fiddling.  By default this variable makes all new groups
that come from mail back ends (`nnml', `nnbabyl', `nnfolder', `nnmbox',
and `nnmh') subscribed.  If you don't like that, just set this variable
to `nil'.

   New groups that match this regexp are subscribed using
`gnus-subscribe-options-newsgroup-method'.


File: gnus,  Node: Changing Servers,  Next: Startup Variables,  Prev: The Active File,  Up: Starting Up

Changing Servers
================

   Sometimes it is necessary to move from one NNTP server to another.
This happens very rarely, but perhaps you change jobs, or one server is
very flaky and you want to use another.

   Changing the server is pretty easy, right?  You just change
`gnus-select-method' to point to the new server?

   _Wrong!_

   Article numbers are not (in any way) kept synchronized between
different NNTP servers, and the only way Gnus keeps track of what
articles you have read is by keeping track of article numbers.  So when
you change `gnus-select-method', your `.newsrc' file becomes worthless.

   Gnus provides a few functions to attempt to translate a `.newsrc'
file from one server to another.  They all have one thing in
common--they take a looong time to run.  You don't want to use these
functions more than absolutely necessary.

   If you have access to both servers, Gnus can request the headers for
all the articles you have read and compare `Message-ID's and map the
article numbers of the read articles and article marks.  The `M-x
gnus-change-server' command will do this for all your native groups.  It
will prompt for the method you want to move to.

   You can also move individual groups with the `M-x
gnus-group-move-group-to-server' command.  This is useful if you want to
move a (foreign) group from one server to another.

   If you don't have access to both the old and new server, all your
marks and read ranges have become worthless.  You can use the `M-x
gnus-group-clear-data-on-native-groups' command to clear out all data
that you have on your native groups.  Use with caution.

   After changing servers, you *must* move the cache hierarchy away,
since the cached articles will have wrong article numbers, which will
affect which articles Gnus thinks are read.


File: gnus,  Node: Startup Files,  Next: Auto Save,  Prev: New Groups,  Up: Starting Up

Startup Files
=============

   Now, you all know about the `.newsrc' file.  All subscription
information is traditionally stored in this file.

   Things got a bit more complicated with GNUS.  In addition to keeping
the `.newsrc' file updated, it also used a file called `.newsrc.el' for
storing all the information that didn't fit into the `.newsrc' file.
(Actually, it also duplicated everything in the `.newsrc' file.)  GNUS
would read whichever one of these files was the most recently saved,
which enabled people to swap between GNUS and other newsreaders.

   That was kinda silly, so Gnus went one better: In addition to the
`.newsrc' and `.newsrc.el' files, Gnus also has a file called
`.newsrc.eld'.  It will read whichever of these files that are most
recent, but it will never write a `.newsrc.el' file.  You should never
delete the `.newsrc.eld' file--it contains much information not stored
in the `.newsrc' file.

   You can turn off writing the `.newsrc' file by setting
`gnus-save-newsrc-file' to `nil', which means you can delete the file
and save some space, as well as exiting from Gnus faster.  However,
this will make it impossible to use other newsreaders than Gnus.  But
hey, who would want to, right?  Similarly, setting
`gnus-read-newsrc-file' to `nil' makes Gnus ignore the `.newsrc' file
and any `.newsrc-SERVER' files, which is convenient if you have a
tendency to use Netscape once in a while.

   If `gnus-save-killed-list' (default `t') is `nil', Gnus will not
save the list of killed groups to the startup file.  This will save
both time (when starting and quitting) and space (on disk).  It will
also mean that Gnus has no record of what groups are new or old, so the
automatic new groups subscription methods become meaningless.  You
should always set `gnus-check-new-newsgroups' to `nil' or `ask-server'
if you set this variable to `nil' (*note New Groups::).  This variable
can also be a regular expression.  If that's the case, remove all
groups that do not match this regexp before saving.  This can be useful
in certain obscure situations that involve several servers where not
all servers support `ask-server'.

   The `gnus-startup-file' variable says where the startup files are.
The default value is `~/.newsrc', with the Gnus (El Dingo) startup file
being whatever that one is, with a `.eld' appended.

   `gnus-save-newsrc-hook' is called before saving any of the newsrc
files, while `gnus-save-quick-newsrc-hook' is called just before saving
the `.newsrc.eld' file, and `gnus-save-standard-newsrc-hook' is called
just before saving the `.newsrc' file.  The latter two are commonly
used to turn version control on or off.  Version control is on by
default when saving the startup files.  If you want to turn backup
creation off, say something like:

     (defun turn-off-backup ()
       (set (make-local-variable 'backup-inhibited) t))
     
     (add-hook 'gnus-save-quick-newsrc-hook 'turn-off-backup)
     (add-hook 'gnus-save-standard-newsrc-hook 'turn-off-backup)

   When Gnus starts, it will read the `gnus-site-init-file'
(`.../site-lisp/gnus' by default) and `gnus-init-file' (`~/.gnus' by
default) files.  These are normal Emacs Lisp files and can be used to
avoid cluttering your `~/.emacs' and `site-init' files with Gnus stuff.
Gnus will also check for files with the same names as these, but with
`.elc' and `.el' suffixes.  In other words, if you have set
`gnus-init-file' to `~/.gnus', it will look for `~/.gnus.elc',
`~/.gnus.el', and finally `~/.gnus' (in this order).


File: gnus,  Node: Auto Save,  Next: The Active File,  Prev: Startup Files,  Up: Starting Up

Auto Save
=========

   Whenever you do something that changes the Gnus data (reading
articles, catching up, killing/subscribing groups), the change is added
to a special "dribble buffer".  This buffer is auto-saved the normal
Emacs way.  If your Emacs should crash before you have saved the
`.newsrc' files, all changes you have made can be recovered from this
file.

   If Gnus detects this file at startup, it will ask the user whether to
read it.  The auto save file is deleted whenever the real startup file
is saved.

   If `gnus-use-dribble-file' is `nil', Gnus won't create and maintain
a dribble buffer.  The default is `t'.

   Gnus will put the dribble file(s) in `gnus-dribble-directory'.  If
this variable is `nil', which it is by default, Gnus will dribble into
the directory where the `.newsrc' file is located.  (This is normally
the user's home directory.)  The dribble file will get the same file
permissions as the `.newsrc' file.

   If `gnus-always-read-dribble-file' is non-`nil', Gnus will read the
dribble file on startup without querying the user.


File: gnus,  Node: The Active File,  Next: Changing Servers,  Prev: Auto Save,  Up: Starting Up

The Active File
===============

   When Gnus starts, or indeed whenever it tries to determine whether
new articles have arrived, it reads the active file.  This is a very
large file that lists all the active groups and articles on the server.

   Before examining the active file, Gnus deletes all lines that match
the regexp `gnus-ignored-newsgroups'.  This is done primarily to reject
any groups with bogus names, but you can use this variable to make Gnus
ignore hierarchies you aren't ever interested in.  However, this is not
recommended.  In fact, it's highly discouraged.  Instead, *note New
Groups:: for an overview of other variables that can be used instead.

   The active file can be rather Huge, so if you have a slow network,
you can set `gnus-read-active-file' to `nil' to prevent Gnus from
reading the active file.  This variable is `some' by default.

   Gnus will try to make do by getting information just on the groups
that you actually subscribe to.

   Note that if you subscribe to lots and lots of groups, setting this
variable to `nil' will probably make Gnus slower, not faster.  At
present, having this variable `nil' will slow Gnus down considerably,
unless you read news over a 2400 baud modem.

   This variable can also have the value `some'.  Gnus will then
attempt to read active info only on the subscribed groups.  On some
servers this is quite fast (on sparkling, brand new INN servers that
support the `LIST ACTIVE group' command), on others this isn't fast at
all.  In any case, `some' should be faster than `nil', and is certainly
faster than `t' over slow lines.

   Some news servers (old versions of Leafnode and old versions of INN,
for instance) do not support the `LIST ACTIVE group'.  For these
servers, `nil' is probably the most efficient value for this variable.

   If this variable is `nil', Gnus will ask for group info in total
lock-step, which isn't very fast.  If it is `some' and you use an NNTP
server, Gnus will pump out commands as fast as it can, and read all the
replies in one swoop.  This will normally result in better performance,
but if the server does not support the aforementioned `LIST ACTIVE
group' command, this isn't very nice to the server.

   If you think that starting up Gnus takes too long, try all the three
different values for this variable and see what works best for you.

   In any case, if you use `some' or `nil', you should definitely kill
all groups that you aren't interested in to speed things up.

   Note that this variable also affects active file retrieval from
secondary select methods.


File: gnus,  Node: Startup Variables,  Prev: Changing Servers,  Up: Starting Up

Startup Variables
=================

`gnus-load-hook'
     A hook run while Gnus is being loaded.  Note that this hook will
     normally be run just once in each Emacs session, no matter how many
     times you start Gnus.

`gnus-before-startup-hook'
     A hook run after starting up Gnus successfully.

`gnus-startup-hook'
     A hook run as the very last thing after starting up Gnus

`gnus-started-hook'
     A hook that is run as the very last thing after starting up Gnus
     successfully.

`gnus-setup-news-hook'
     A hook that is run after reading the `.newsrc' file(s), but before
     generating the group buffer.

`gnus-check-bogus-newsgroups'
     If non-`nil', Gnus will check for and delete all bogus groups at
     startup.  A "bogus group" is a group that you have in your
     `.newsrc' file, but doesn't exist on the news server.  Checking for
     bogus groups can take quite a while, so to save time and resources
     it's best to leave this option off, and do the checking for bogus
     groups once in a while from the group buffer instead (*note Group
     Maintenance::).

`gnus-inhibit-startup-message'
     If non-`nil', the startup message won't be displayed.  That way,
     your boss might not notice as easily that you are reading news
     instead of doing your job.  Note that this variable is used before
     `.gnus.el' is loaded, so it should be set in `.emacs' instead.

`gnus-no-groups-message'
     Message displayed by Gnus when no groups are available.

`gnus-play-startup-jingle'
     If non-`nil', play the Gnus jingle at startup.

`gnus-startup-jingle'
     Jingle to be played if the above variable is non-`nil'.  The
     default is `Tuxedomoon.Jingle4.au'.


File: gnus,  Node: The Group Buffer,  Next: The Summary Buffer,  Prev: Starting Up,  Up: Top

The Group Buffer
****************

   The "group buffer" lists all (or parts) of the available groups.  It
is the first buffer shown when Gnus starts, and will never be killed as
long as Gnus is active.

* Menu:

* Group Buffer Format::    Information listed and how you can change it.
* Group Maneuvering::      Commands for moving in the group buffer.
* Selecting a Group::      Actually reading news.
* Group Data::             Changing the info for a group.
* Subscription Commands::  Unsubscribing, killing, subscribing.
* Group Levels::           Levels? What are those, then?
* Group Score::            A mechanism for finding out what groups you like.
* Marking Groups::         You can mark groups for later processing.
* Foreign Groups::         Creating and editing groups.
* Group Parameters::       Each group may have different parameters set.
* Listing Groups::         Gnus can list various subsets of the groups.
* Sorting Groups::         Re-arrange the group order.
* Group Maintenance::      Maintaining a tidy `.newsrc' file.
* Browse Foreign Server::  You can browse a server.  See what it has to offer.
* Exiting Gnus::           Stop reading news and get some work done.
* Group Topics::           A folding group mode divided into topics.
* Misc Group Stuff::       Other stuff that you can to do.

